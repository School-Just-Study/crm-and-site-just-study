import { KeystoneContext } from '@keystone-6/core/dist/declarations/src/types';
import { mailer } from '../lib/nodemailer';
import { MAIL_USER } from '../config';
import { baseTemplateEmail } from '../mailTemplate/base';
import { Roles } from '../enums/roles.enum';
import { fieldsEmail } from '../lib/fieldsEmail';
import { getTextCurrency } from '../lib/getCurrency';

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
 * @param clientId
 * @param paymentId
 * @param ctx
 */
export const notifySuccessfulPaymentForClient = async (
  clientId: string,
  paymentId: number,
  ctx: KeystoneContext
) => {
  const client = await ctx.query.User.findOne({
    where: { id: clientId },
    query: `email name`,
  });
  const payment = await ctx.query.Payment.findOne({
    where: { id: `${paymentId}` },
    query: `receiptId amount currency`,
  });

  const amountText = `${payment.amount} ${getTextCurrency(payment.currency)}`;

  const emailInfo = `
    <div style='display:flex; flex-direction: column; gap: 8px'>
    <p>${client.name}, –≤–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ ‚ú®</p>
    ${fieldsEmail("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞", amountText)}
    <div style='display:flex; flex-direction: column; width: 100%; align-items: center'>
      <p>–í–∞—à —á–µ–∫:</p>
      <img src='https://lknpd.nalog.ru/api/v1/receipt/710303226683/${
        payment.receiptId
      }/print' alt='—á–µ–∫'>
</div>
</div>
  `;

  await mailer.sendMail({
    to: client.email,
    from: MAIL_USER,
    subject: "–í–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–∫–æ –æ–ø–ª–∞—á–µ–Ω–æ",
    html: baseTemplateEmail("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ø–ª–∞—Ç–µ–∂–µ", emailInfo),
  });
};

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
 * @param clientId
 * @param paymentId
 * @param ctx
 */
export const notifySuccessfulPaymentForManagers = async (
  clientId: string,
  paymentId: number,
  ctx: KeystoneContext
) => {
  const client = await ctx.query.User.findOne({
    where: { id: clientId },
    query: `email name`,
  });
  const payment = await ctx.query.Payment.findOne({
    where: { id: `${paymentId}` },
    query: `receiptId amount currency`,
  });
  const managers = await ctx.query.User.findMany({
    where: { role: { in: [Roles.Admin, Roles.Manager] } },
    query: `email`,
  });

  const managersEmail = managers.map((user) => user.email);
  const amountText = `${payment.amount} ${getTextCurrency(payment.currency)}`;

  const emailInfo = `
  <div style='display:flex; flex-direction: column; gap: 8px'>
  <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</p>
  <p>–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç ${client.name} üòç</p>
  ${fieldsEmail("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ", amountText)}
  <p>–ß–µ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –ø–æ—á—Ç—É!</p>
</div>
  `;

  await mailer.sendMail({
    to: managersEmail,
    from: MAIL_USER,
    subject: "–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ üíÉüï∫",
    html: baseTemplateEmail("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –ø–ª–∞—Ç–µ–∂–µ", emailInfo),
  });
};

import { KeystoneContext } from '@keystone-6/core/dist/declarations/src/types';
import { Lists } from '.keystone/types';
import { formatInTimeZone } from 'date-fns-tz';
import { localeDate } from '../lib/localeDate';
import { sendMessage } from './index';

const infoForTeacher = (lesson: any, teacher: Lists.Manager.Item) => {
    const dateFormatStart = formatInTimeZone(new Date(lesson.startTime), teacher.timeZone, 'd MMMM yyyy HH:mm zzz', {
        locale: localeDate(teacher.language)
    });

    const dateFormatEnd = formatInTimeZone(new Date(lesson.endTime), teacher.timeZone, 'd MMMM yyyy HH:mm zzz', {
        locale: localeDate(teacher.language)
    });

    const studentsName = lesson.students.map((student: Lists.User.Item) => student.name);

    return `
      <div style='display:flex; flex-direction: column;'>
          <p>üßëüèº‚Äçüè´ ${teacher.name},</p>
          <p>ü¶Ñ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ —Å —É—á–µ–Ω–∏–∫–æ–º: ${studentsName.join(', ')} </p>
          <p>‚è∞ –ù–∞—á–∞–ª–æ: ${dateFormatStart}, ${teacher.timeZone}</p>
          <p>‚è∞ –ö–æ–Ω–µ—Ü: ${dateFormatEnd}, ${teacher.timeZone}</p>
      </div>
    `;
};

/**
 * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞
 * @param lessonId
 * @param ctx
 */
export const notifyLessonUpdated = async (lessonId: Lists.Lesson.Item['id'], ctx: KeystoneContext) => {
    const lesson = await ctx.query.Lesson.findOne({
        where: { id: `${lessonId}` },
        query: `id statusLesson startTime endTime teachers { id email name language timeZone } students { id name email }`
    });

    for (const teacher of lesson.teachers) {
        await sendMessage({
            email: teacher.email,
            title: 'ü¶Ñ –£—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω',
            body: infoForTeacher(lesson, teacher)
        });
    }
};

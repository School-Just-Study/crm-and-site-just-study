# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Cart {
  id: ID!
  label: String
  user: User
  linkForUser: String
  currency: String
  items(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [CartItem!]
  itemsCount(where: CartItemWhereInput! = {}): Int
  amount: Int
  quantityPayments: Int
  lastModification: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CartWhereUniqueInput {
  id: ID
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  user: UserWhereInput
  currency: StringFilter
  items: CartItemManyRelationFilter
  quantityPayments: IntNullableFilter
  lastModification: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input CartOrderByInput {
  id: OrderDirection
  currency: OrderDirection
  quantityPayments: OrderDirection
  lastModification: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CartUpdateInput {
  user: UserRelateToOneForUpdateInput
  currency: String
  items: CartItemRelateToManyForUpdateInput
  quantityPayments: Int
  lastModification: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

type CartItem {
  id: ID!
  cart: Cart
  subscription: Subscription
  service: Service
  originalPrice: Int
  price: Int
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  cart: CartWhereInput
  subscription: SubscriptionWhereInput
  service: ServiceWhereInput
  price: IntNullableFilter
}

input CartItemOrderByInput {
  id: OrderDirection
  price: OrderDirection
}

input CartItemUpdateInput {
  cart: CartRelateToOneForUpdateInput
  subscription: SubscriptionRelateToOneForUpdateInput
  service: ServiceRelateToOneForUpdateInput
  price: Int
}

input CartRelateToOneForUpdateInput {
  connect: CartWhereUniqueInput
  disconnect: Boolean
}

input SubscriptionRelateToOneForUpdateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
  disconnect: Boolean
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  cart: CartRelateToOneForCreateInput
  subscription: SubscriptionRelateToOneForCreateInput
  service: ServiceRelateToOneForCreateInput
  price: Int
}

input CartRelateToOneForCreateInput {
  connect: CartWhereUniqueInput
}

input SubscriptionRelateToOneForCreateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type Category {
  id: ID!
  language: String
  name: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  language: StringFilter
  name: StringFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input CategoryUpdateInput {
  language: String
  name: String
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  language: String
  name: String
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Direction {
  id: ID!
  language: String
  statusView: String
  slug: String
  name: String
  description: String
  image: ImageFieldOutput
  goals(where: DirectionGoalWhereInput! = {}, orderBy: [DirectionGoalOrderByInput!]! = [], take: Int, skip: Int! = 0): [DirectionGoal!]
  goalsCount(where: DirectionGoalWhereInput! = {}): Int
  results(where: DirectionResultWhereInput! = {}, orderBy: [DirectionResultOrderByInput!]! = [], take: Int, skip: Int! = 0): [DirectionResult!]
  resultsCount(where: DirectionResultWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  lastModification: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input DirectionWhereUniqueInput {
  id: ID
}

input DirectionWhereInput {
  AND: [DirectionWhereInput!]
  OR: [DirectionWhereInput!]
  NOT: [DirectionWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  slug: StringFilter
  name: StringFilter
  description: StringFilter
  goals: DirectionGoalManyRelationFilter
  results: DirectionResultManyRelationFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input DirectionGoalManyRelationFilter {
  every: DirectionGoalWhereInput
  some: DirectionGoalWhereInput
  none: DirectionGoalWhereInput
}

input DirectionResultManyRelationFilter {
  every: DirectionResultWhereInput
  some: DirectionResultWhereInput
  none: DirectionResultWhereInput
}

input DirectionOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input DirectionUpdateInput {
  language: String
  statusView: String
  slug: String
  name: String
  description: String
  image: ImageFieldInput
  goals: DirectionGoalRelateToManyForUpdateInput
  results: DirectionResultRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DirectionGoalRelateToManyForUpdateInput {
  disconnect: [DirectionGoalWhereUniqueInput!]
  set: [DirectionGoalWhereUniqueInput!]
  create: [DirectionGoalCreateInput!]
  connect: [DirectionGoalWhereUniqueInput!]
}

input DirectionResultRelateToManyForUpdateInput {
  disconnect: [DirectionResultWhereUniqueInput!]
  set: [DirectionResultWhereUniqueInput!]
  create: [DirectionResultCreateInput!]
  connect: [DirectionResultWhereUniqueInput!]
}

input DirectionUpdateArgs {
  where: DirectionWhereUniqueInput!
  data: DirectionUpdateInput!
}

input DirectionCreateInput {
  language: String
  statusView: String
  slug: String
  name: String
  description: String
  image: ImageFieldInput
  goals: DirectionGoalRelateToManyForCreateInput
  results: DirectionResultRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input DirectionGoalRelateToManyForCreateInput {
  create: [DirectionGoalCreateInput!]
  connect: [DirectionGoalWhereUniqueInput!]
}

input DirectionResultRelateToManyForCreateInput {
  create: [DirectionResultCreateInput!]
  connect: [DirectionResultWhereUniqueInput!]
}

type DirectionGoal {
  id: ID!
  statusView: String
  name: String
  image: ImageFieldOutput
  createdAt: DateTime
  lastModification: DateTime
}

input DirectionGoalWhereUniqueInput {
  id: ID
}

input DirectionGoalWhereInput {
  AND: [DirectionGoalWhereInput!]
  OR: [DirectionGoalWhereInput!]
  NOT: [DirectionGoalWhereInput!]
  id: IDFilter
  statusView: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input DirectionGoalOrderByInput {
  id: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input DirectionGoalUpdateInput {
  statusView: String
  name: String
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

input DirectionGoalUpdateArgs {
  where: DirectionGoalWhereUniqueInput!
  data: DirectionGoalUpdateInput!
}

input DirectionGoalCreateInput {
  statusView: String
  name: String
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

type DirectionResult {
  id: ID!
  statusView: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

input DirectionResultWhereUniqueInput {
  id: ID
}

input DirectionResultWhereInput {
  AND: [DirectionResultWhereInput!]
  OR: [DirectionResultWhereInput!]
  NOT: [DirectionResultWhereInput!]
  id: IDFilter
  statusView: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input DirectionResultOrderByInput {
  id: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input DirectionResultUpdateInput {
  statusView: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

input DirectionResultUpdateArgs {
  where: DirectionResultWhereUniqueInput!
  data: DirectionResultUpdateInput!
}

input DirectionResultCreateInput {
  statusView: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

type Order {
  id: ID!
  label: String
  linkForUser: String
  student: User
  quantityPayments: Int
  leftPayments: Int
  currency: String
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  status: OrderStatusType
  subscriptions(where: UserSubscriptionWhereInput! = {}, orderBy: [UserSubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserSubscription!]
  subscriptionsCount(where: UserSubscriptionWhereInput! = {}): Int
  services(where: UserServiceWhereInput! = {}, orderBy: [UserServiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserService!]
  servicesCount(where: UserServiceWhereInput! = {}): Int
  amount: Int
  payed: Int
  dept: Int
  nextPayment: Int
  createdAt: DateTime
  lastModification: DateTime
}

enum OrderStatusType {
  created
  frozen
  processing
  finished
  cancelled
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  label: StringFilter
  student: UserWhereInput
  quantityPayments: IntFilter
  currency: StringFilter
  payments: PaymentManyRelationFilter
  status: OrderStatusTypeNullableFilter
  subscriptions: UserSubscriptionManyRelationFilter
  services: UserServiceManyRelationFilter
  amount: IntNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input OrderStatusTypeNullableFilter {
  equals: OrderStatusType
  in: [OrderStatusType!]
  notIn: [OrderStatusType!]
  not: OrderStatusTypeNullableFilter
}

input UserSubscriptionManyRelationFilter {
  every: UserSubscriptionWhereInput
  some: UserSubscriptionWhereInput
  none: UserSubscriptionWhereInput
}

input UserServiceManyRelationFilter {
  every: UserServiceWhereInput
  some: UserServiceWhereInput
  none: UserServiceWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  label: OrderDirection
  quantityPayments: OrderDirection
  currency: OrderDirection
  status: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input OrderUpdateInput {
  label: String
  student: UserRelateToOneForUpdateInput
  quantityPayments: Int
  currency: String
  payments: PaymentRelateToManyForUpdateInput
  status: OrderStatusType
  subscriptions: UserSubscriptionRelateToManyForUpdateInput
  services: UserServiceRelateToManyForUpdateInput
  amount: Int
  createdAt: DateTime
  lastModification: DateTime
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserSubscriptionRelateToManyForUpdateInput {
  disconnect: [UserSubscriptionWhereUniqueInput!]
  set: [UserSubscriptionWhereUniqueInput!]
  create: [UserSubscriptionCreateInput!]
  connect: [UserSubscriptionWhereUniqueInput!]
}

input UserServiceRelateToManyForUpdateInput {
  disconnect: [UserServiceWhereUniqueInput!]
  set: [UserServiceWhereUniqueInput!]
  create: [UserServiceCreateInput!]
  connect: [UserServiceWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  label: String
  student: UserRelateToOneForCreateInput
  quantityPayments: Int
  currency: String
  payments: PaymentRelateToManyForCreateInput
  status: OrderStatusType
  subscriptions: UserSubscriptionRelateToManyForCreateInput
  services: UserServiceRelateToManyForCreateInput
  amount: Int
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserSubscriptionRelateToManyForCreateInput {
  create: [UserSubscriptionCreateInput!]
  connect: [UserSubscriptionWhereUniqueInput!]
}

input UserServiceRelateToManyForCreateInput {
  create: [UserServiceCreateInput!]
  connect: [UserServiceWhereUniqueInput!]
}

type Payment {
  id: ID!
  order: Order
  currency: String
  student: User
  amount: Int
  sessionId: String
  receiptId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

enum PaymentStatusType {
  created
  successfully
  cancelled
  error
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  currency: StringFilter
  student: UserWhereInput
  amount: IntNullableFilter
  sessionId: StringFilter
  receiptId: StringFilter
  status: PaymentStatusTypeNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input PaymentStatusTypeNullableFilter {
  equals: PaymentStatusType
  in: [PaymentStatusType!]
  notIn: [PaymentStatusType!]
  not: PaymentStatusTypeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  currency: OrderDirection
  amount: OrderDirection
  sessionId: OrderDirection
  receiptId: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PaymentUpdateInput {
  order: OrderRelateToOneForUpdateInput
  currency: String
  student: UserRelateToOneForUpdateInput
  amount: Int
  sessionId: String
  receiptId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  order: OrderRelateToOneForCreateInput
  currency: String
  student: UserRelateToOneForCreateInput
  amount: Int
  sessionId: String
  receiptId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Product {
  id: ID!
  language: String
  statusView: String
  name: String
  description: String
  desc: Product_desc_Document
  category: Category
  image: ImageFieldOutput
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  subscriptions(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Subscription!]
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  createdAt: DateTime
  lastModification: DateTime
}

type Product_desc_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  name: StringFilter
  description: StringFilter
  category: CategoryWhereInput
  tags: TagManyRelationFilter
  subscriptions: SubscriptionManyRelationFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input SubscriptionManyRelationFilter {
  every: SubscriptionWhereInput
  some: SubscriptionWhereInput
  none: SubscriptionWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductUpdateInput {
  language: String
  statusView: String
  name: String
  description: String
  desc: JSON
  category: CategoryRelateToOneForUpdateInput
  image: ImageFieldInput
  tags: TagRelateToManyForUpdateInput
  subscriptions: SubscriptionRelateToManyForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SubscriptionRelateToManyForUpdateInput {
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  language: String
  statusView: String
  name: String
  description: String
  desc: JSON
  category: CategoryRelateToOneForCreateInput
  image: ImageFieldInput
  tags: TagRelateToManyForCreateInput
  subscriptions: SubscriptionRelateToManyForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SubscriptionRelateToManyForCreateInput {
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

type ProductReview {
  id: ID!
  language: String
  statusView: String
  student: User
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

input ProductReviewWhereUniqueInput {
  id: ID
}

input ProductReviewWhereInput {
  AND: [ProductReviewWhereInput!]
  OR: [ProductReviewWhereInput!]
  NOT: [ProductReviewWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  student: UserWhereInput
  products: ProductManyRelationFilter
  desc: StringFilter
  media: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input ProductReviewOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  desc: OrderDirection
  media: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductReviewUpdateInput {
  language: String
  statusView: String
  student: UserRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

input ProductReviewUpdateArgs {
  where: ProductReviewWhereUniqueInput!
  data: ProductReviewUpdateInput!
}

input ProductReviewCreateInput {
  language: String
  statusView: String
  student: UserRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

type User {
  id: ID!
  language: String
  avatar: AvatarUser
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  comment: String
  client: Client
  manager: Manager
  cart: Cart
  magicLinkToken: String
  createdAt: DateTime
  lastModification: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  language: StringFilter
  avatar: AvatarUserWhereInput
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  role: UserRoleTypeNullableFilter
  comment: StringFilter
  client: ClientWhereInput
  manager: ManagerWhereInput
  cart: CartWhereInput
  magicLinkToken: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  comment: OrderDirection
  magicLinkToken: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

input UserUpdateInput {
  language: String
  avatar: AvatarUserRelateToOneForUpdateInput
  name: String
  email: String
  password: String
  role: UserRoleType
  comment: String
  client: ClientRelateToOneForUpdateInput
  manager: ManagerRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
  magicLinkToken: String
  createdAt: DateTime
  lastModification: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input AvatarUserRelateToOneForUpdateInput {
  create: AvatarUserCreateInput
  connect: AvatarUserWhereUniqueInput
  disconnect: Boolean
}

input ClientRelateToOneForUpdateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
}

input ManagerRelateToOneForUpdateInput {
  create: ManagerCreateInput
  connect: ManagerWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  language: String
  avatar: AvatarUserRelateToOneForCreateInput
  name: String
  email: String
  password: String
  role: UserRoleType
  comment: String
  client: ClientRelateToOneForCreateInput
  manager: ManagerRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
  magicLinkToken: String
  createdAt: DateTime
  lastModification: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input AvatarUserRelateToOneForCreateInput {
  create: AvatarUserCreateInput
  connect: AvatarUserWhereUniqueInput
}

input ClientRelateToOneForCreateInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

input ManagerRelateToOneForCreateInput {
  create: ManagerCreateInput
  connect: ManagerWhereUniqueInput
}

type AvatarUser {
  id: ID!
  user: User
  image: ImageFieldOutput
  createdAt: DateTime
  lastModification: DateTime
}

input AvatarUserWhereUniqueInput {
  id: ID
}

input AvatarUserWhereInput {
  AND: [AvatarUserWhereInput!]
  OR: [AvatarUserWhereInput!]
  NOT: [AvatarUserWhereInput!]
  id: IDFilter
  user: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input AvatarUserOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input AvatarUserUpdateInput {
  user: UserRelateToOneForUpdateInput
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

input AvatarUserUpdateArgs {
  where: AvatarUserWhereUniqueInput!
  data: AvatarUserUpdateInput!
}

input AvatarUserCreateInput {
  user: UserRelateToOneForCreateInput
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

type SourceClient {
  id: ID!
  name: String
  parent: SourceClient
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientWhereUniqueInput {
  id: ID
}

input SourceClientWhereInput {
  AND: [SourceClientWhereInput!]
  OR: [SourceClientWhereInput!]
  NOT: [SourceClientWhereInput!]
  id: IDFilter
  name: StringFilter
  parent: SourceClientWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input SourceClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input SourceClientUpdateInput {
  name: String
  parent: SourceClientRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientRelateToOneForUpdateInput {
  create: SourceClientCreateInput
  connect: SourceClientWhereUniqueInput
  disconnect: Boolean
}

input SourceClientUpdateArgs {
  where: SourceClientWhereUniqueInput!
  data: SourceClientUpdateInput!
}

input SourceClientCreateInput {
  name: String
  parent: SourceClientRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientRelateToOneForCreateInput {
  create: SourceClientCreateInput
  connect: SourceClientWhereUniqueInput
}

type Subscription {
  id: ID!
  language: String
  label: String
  statusView: String
  name: String
  visitCount: Int
  unlimited: Boolean
  price: Int
  period: Int
  desc: Subscription_desc_Document
  trial: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

type Subscription_desc_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  name: StringFilter
  visitCount: IntFilter
  unlimited: BooleanFilter
  price: IntFilter
  period: IntNullableFilter
  trial: BooleanFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SubscriptionOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  visitCount: OrderDirection
  unlimited: OrderDirection
  price: OrderDirection
  period: OrderDirection
  trial: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input SubscriptionUpdateInput {
  language: String
  statusView: String
  name: String
  visitCount: Int
  unlimited: Boolean
  price: Int
  period: Int
  desc: JSON
  trial: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  language: String
  statusView: String
  name: String
  visitCount: Int
  unlimited: Boolean
  price: Int
  period: Int
  desc: JSON
  trial: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

type UserSubscription {
  id: ID!
  name: String
  visitCount: Int
  unlimited: Boolean
  originalPrice: Int
  price: Int
  status: String
  student: User
  beginDate: DateTime
  endDate: DateTime
  totalVisited: Int
  customVisited: Int
  lastCount: Int
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  trial: Boolean
  manager: User
  createdAt: DateTime
  lastModification: DateTime
}

input UserSubscriptionWhereUniqueInput {
  id: ID
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
  id: IDFilter
  name: StringFilter
  visitCount: IntNullableFilter
  unlimited: BooleanFilter
  originalPrice: IntNullableFilter
  price: IntNullableFilter
  status: StringFilter
  student: UserWhereInput
  beginDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  customVisited: IntNullableFilter
  lessons: LessonManyRelationFilter
  trial: BooleanFilter
  manager: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input LessonManyRelationFilter {
  every: LessonWhereInput
  some: LessonWhereInput
  none: LessonWhereInput
}

input UserSubscriptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  visitCount: OrderDirection
  unlimited: OrderDirection
  originalPrice: OrderDirection
  price: OrderDirection
  status: OrderDirection
  beginDate: OrderDirection
  endDate: OrderDirection
  customVisited: OrderDirection
  trial: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input UserSubscriptionUpdateInput {
  name: String
  visitCount: Int
  unlimited: Boolean
  originalPrice: Int
  price: Int
  status: String
  student: UserRelateToOneForUpdateInput
  beginDate: DateTime
  endDate: DateTime
  customVisited: Int
  lessons: LessonRelateToManyForUpdateInput
  trial: Boolean
  manager: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input LessonRelateToManyForUpdateInput {
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input UserSubscriptionUpdateArgs {
  where: UserSubscriptionWhereUniqueInput!
  data: UserSubscriptionUpdateInput!
}

input UserSubscriptionCreateInput {
  name: String
  visitCount: Int
  unlimited: Boolean
  originalPrice: Int
  price: Int
  status: String
  student: UserRelateToOneForCreateInput
  beginDate: DateTime
  endDate: DateTime
  customVisited: Int
  lessons: LessonRelateToManyForCreateInput
  trial: Boolean
  manager: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input LessonRelateToManyForCreateInput {
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

type Service {
  id: ID!
  language: String
  label: String
  statusView: String
  name: String
  description: Service_description_Document
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  price: Int
  createdAt: DateTime
  lastModification: DateTime
}

type Service_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  name: StringFilter
  categories: CategoryManyRelationFilter
  price: IntNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ServiceUpdateInput {
  language: String
  statusView: String
  name: String
  description: JSON
  categories: CategoryRelateToManyForUpdateInput
  price: Int
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  language: String
  statusView: String
  name: String
  description: JSON
  categories: CategoryRelateToManyForCreateInput
  price: Int
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type UserService {
  id: ID!
  name: String
  originalPrice: Int
  status: String
  price: Int
  student: User
  manager: User
  createdAt: DateTime
  lastModification: DateTime
}

input UserServiceWhereUniqueInput {
  id: ID
}

input UserServiceWhereInput {
  AND: [UserServiceWhereInput!]
  OR: [UserServiceWhereInput!]
  NOT: [UserServiceWhereInput!]
  id: IDFilter
  name: StringFilter
  originalPrice: IntNullableFilter
  status: StringFilter
  price: IntNullableFilter
  student: UserWhereInput
  manager: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input UserServiceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  originalPrice: OrderDirection
  status: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input UserServiceUpdateInput {
  name: String
  originalPrice: Int
  status: String
  price: Int
  student: UserRelateToOneForUpdateInput
  manager: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserServiceUpdateArgs {
  where: UserServiceWhereUniqueInput!
  data: UserServiceUpdateInput!
}

input UserServiceCreateInput {
  name: String
  originalPrice: Int
  status: String
  price: Int
  student: UserRelateToOneForCreateInput
  manager: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

type Page {
  id: ID!
  language: String
  statusView: String
  title: String
  slug: String
  description: String
  content: Page_content_Document
  tag(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  author: User
  createdAt: DateTime
  lastModification: DateTime
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  tag: TagManyRelationFilter
  author: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input PageOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PageUpdateInput {
  language: String
  statusView: String
  title: String
  slug: String
  description: String
  content: JSON
  tag: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  language: String
  statusView: String
  title: String
  slug: String
  description: String
  content: JSON
  tag: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

type Tag {
  id: ID!
  language: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  language: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input TagOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input TagUpdateInput {
  language: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  language: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

type Faq {
  id: ID!
  language: String
  statusView: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  title: String
  desc: String
  createdAt: DateTime
  lastModification: DateTime
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  products: ProductManyRelationFilter
  title: StringFilter
  desc: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input FaqOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  desc: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input FaqUpdateInput {
  language: String
  statusView: String
  products: ProductRelateToManyForUpdateInput
  title: String
  desc: String
  createdAt: DateTime
  lastModification: DateTime
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  language: String
  statusView: String
  products: ProductRelateToManyForCreateInput
  title: String
  desc: String
  createdAt: DateTime
  lastModification: DateTime
}

type Post {
  id: ID!
  language: String
  statusView: String
  cover: Image
  title: String
  description: String
  content: Post_content_Document
  tag(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  author: User
  createdAt: DateTime
  lastModification: DateTime
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  cover: ImageWhereInput
  title: StringFilter
  description: StringFilter
  tag: TagManyRelationFilter
  author: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input PostOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PostUpdateInput {
  language: String
  statusView: String
  cover: ImageRelateToOneForUpdateInput
  title: String
  description: String
  content: JSON
  tag: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  language: String
  statusView: String
  cover: ImageRelateToOneForCreateInput
  title: String
  description: String
  content: JSON
  tag: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Marketing {
  id: ID!
  language: String
  statusView: String
  link: String
  slug: String
  image: ImageFieldOutput
  title: String
  description: String
  aboutGeorge: Boolean!
  advantages: Boolean!
  reviews: Boolean!
  createdAt: DateTime
  lastModification: DateTime
}

input MarketingWhereUniqueInput {
  id: ID
  slug: String
}

input MarketingWhereInput {
  AND: [MarketingWhereInput!]
  OR: [MarketingWhereInput!]
  NOT: [MarketingWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  aboutGeorge: BooleanFilter
  advantages: BooleanFilter
  reviews: BooleanFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input MarketingOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  description: OrderDirection
  aboutGeorge: OrderDirection
  advantages: OrderDirection
  reviews: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input MarketingUpdateInput {
  language: String
  statusView: String
  slug: String
  image: ImageFieldInput
  title: String
  description: String
  aboutGeorge: Boolean
  advantages: Boolean
  reviews: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

input MarketingUpdateArgs {
  where: MarketingWhereUniqueInput!
  data: MarketingUpdateInput!
}

input MarketingCreateInput {
  language: String
  statusView: String
  slug: String
  image: ImageFieldInput
  title: String
  description: String
  aboutGeorge: Boolean! = true
  advantages: Boolean! = true
  reviews: Boolean! = true
  createdAt: DateTime
  lastModification: DateTime
}

type Link {
  id: ID!
  label: String
  status: String
  link: String
  createdAt: DateTime
  lastModification: DateTime
}

input LinkWhereUniqueInput {
  id: ID
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  status: StringFilter
  link: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input LinkOrderByInput {
  id: OrderDirection
  status: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input LinkUpdateInput {
  status: String
  link: String
  createdAt: DateTime
  lastModification: DateTime
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  status: String
  link: String
  createdAt: DateTime
  lastModification: DateTime
}

type Client {
  id: ID!
  language: String
  name: String
  email: String
  phone: Decimal
  statusClient: ClientStatusClientType
  levelStudent: ClientLevelStudentType
  profession: String
  goal: String
  source(where: SourceClientWhereInput! = {}, orderBy: [SourceClientOrderByInput!]! = [], take: Int, skip: Int! = 0): [SourceClient!]
  sourceCount(where: SourceClientWhereInput! = {}): Int
  teachers(where: ManagerWhereInput! = {}, orderBy: [ManagerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Manager!]
  teachersCount(where: ManagerWhereInput! = {}): Int
  comment: String
  ymClientId: String
  createdAt: DateTime
  lastModification: DateTime
}

scalar Decimal

enum ClientStatusClientType {
  new
  firstCall
  recordFirstLesson
  trialLesson
  decisionAfterTrialLesson
  LowQualityLead
  client
  finishedClient
  disabledClient
  rejection
}

enum ClientLevelStudentType {
  a1
  a2
  b1
  b2
  c1
}

input ClientWhereUniqueInput {
  id: ID
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  language: StringFilter
  name: StringFilter
  email: StringFilter
  phone: DecimalNullableFilter
  statusClient: ClientStatusClientTypeNullableFilter
  levelStudent: ClientLevelStudentTypeNullableFilter
  profession: StringFilter
  goal: StringFilter
  source: SourceClientManyRelationFilter
  teachers: ManagerManyRelationFilter
  comment: StringFilter
  ymClientId: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input ClientStatusClientTypeNullableFilter {
  equals: ClientStatusClientType
  in: [ClientStatusClientType!]
  notIn: [ClientStatusClientType!]
  not: ClientStatusClientTypeNullableFilter
}

input ClientLevelStudentTypeNullableFilter {
  equals: ClientLevelStudentType
  in: [ClientLevelStudentType!]
  notIn: [ClientLevelStudentType!]
  not: ClientLevelStudentTypeNullableFilter
}

input SourceClientManyRelationFilter {
  every: SourceClientWhereInput
  some: SourceClientWhereInput
  none: SourceClientWhereInput
}

input ManagerManyRelationFilter {
  every: ManagerWhereInput
  some: ManagerWhereInput
  none: ManagerWhereInput
}

input ClientOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  statusClient: OrderDirection
  levelStudent: OrderDirection
  profession: OrderDirection
  goal: OrderDirection
  comment: OrderDirection
  ymClientId: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ClientUpdateInput {
  language: String
  name: String
  email: String
  phone: Decimal
  statusClient: ClientStatusClientType
  levelStudent: ClientLevelStudentType
  profession: String
  goal: String
  source: SourceClientRelateToManyForUpdateInput
  teachers: ManagerRelateToManyForUpdateInput
  comment: String
  ymClientId: String
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientRelateToManyForUpdateInput {
  disconnect: [SourceClientWhereUniqueInput!]
  set: [SourceClientWhereUniqueInput!]
  create: [SourceClientCreateInput!]
  connect: [SourceClientWhereUniqueInput!]
}

input ManagerRelateToManyForUpdateInput {
  disconnect: [ManagerWhereUniqueInput!]
  set: [ManagerWhereUniqueInput!]
  create: [ManagerCreateInput!]
  connect: [ManagerWhereUniqueInput!]
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  language: String
  name: String
  email: String
  phone: Decimal
  statusClient: ClientStatusClientType
  levelStudent: ClientLevelStudentType
  profession: String
  goal: String
  source: SourceClientRelateToManyForCreateInput
  teachers: ManagerRelateToManyForCreateInput
  comment: String
  ymClientId: String
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientRelateToManyForCreateInput {
  create: [SourceClientCreateInput!]
  connect: [SourceClientWhereUniqueInput!]
}

input ManagerRelateToManyForCreateInput {
  create: [ManagerCreateInput!]
  connect: [ManagerWhereUniqueInput!]
}

type Manager {
  id: ID!
  language: String
  name: String
  email: String
  phone: Decimal
  work: Boolean
  teacher: Boolean
  linkOnlineLesson: String
  workTime(where: WorkTimeWhereInput! = {}, orderBy: [WorkTimeOrderByInput!]! = [], take: Int, skip: Int! = 0): [WorkTime!]
  workTimeCount(where: WorkTimeWhereInput! = {}): Int
  cutoff(where: WorkTimeCutoffWhereInput! = {}, orderBy: [WorkTimeCutoffOrderByInput!]! = [], take: Int, skip: Int! = 0): [WorkTimeCutoff!]
  cutoffCount(where: WorkTimeCutoffWhereInput! = {}): Int
  timeZone: String
  calendar: String
  comment: String
  createdAt: DateTime
  lastModification: DateTime
}

input ManagerWhereUniqueInput {
  id: ID
}

input ManagerWhereInput {
  AND: [ManagerWhereInput!]
  OR: [ManagerWhereInput!]
  NOT: [ManagerWhereInput!]
  id: IDFilter
  language: StringFilter
  name: StringFilter
  email: StringFilter
  phone: DecimalNullableFilter
  work: BooleanFilter
  teacher: BooleanFilter
  linkOnlineLesson: StringFilter
  workTime: WorkTimeManyRelationFilter
  cutoff: WorkTimeCutoffManyRelationFilter
  timeZone: StringFilter
  calendar: StringFilter
  comment: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input WorkTimeManyRelationFilter {
  every: WorkTimeWhereInput
  some: WorkTimeWhereInput
  none: WorkTimeWhereInput
}

input WorkTimeCutoffManyRelationFilter {
  every: WorkTimeCutoffWhereInput
  some: WorkTimeCutoffWhereInput
  none: WorkTimeCutoffWhereInput
}

input ManagerOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  work: OrderDirection
  teacher: OrderDirection
  linkOnlineLesson: OrderDirection
  timeZone: OrderDirection
  calendar: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ManagerUpdateInput {
  language: String
  name: String
  email: String
  phone: Decimal
  work: Boolean
  teacher: Boolean
  linkOnlineLesson: String
  workTime: WorkTimeRelateToManyForUpdateInput
  cutoff: WorkTimeCutoffRelateToManyForUpdateInput
  timeZone: String
  calendar: String
  comment: String
  createdAt: DateTime
  lastModification: DateTime
}

input WorkTimeRelateToManyForUpdateInput {
  disconnect: [WorkTimeWhereUniqueInput!]
  set: [WorkTimeWhereUniqueInput!]
  create: [WorkTimeCreateInput!]
  connect: [WorkTimeWhereUniqueInput!]
}

input WorkTimeCutoffRelateToManyForUpdateInput {
  disconnect: [WorkTimeCutoffWhereUniqueInput!]
  set: [WorkTimeCutoffWhereUniqueInput!]
  create: [WorkTimeCutoffCreateInput!]
  connect: [WorkTimeCutoffWhereUniqueInput!]
}

input ManagerUpdateArgs {
  where: ManagerWhereUniqueInput!
  data: ManagerUpdateInput!
}

input ManagerCreateInput {
  language: String
  name: String
  email: String
  phone: Decimal
  work: Boolean
  teacher: Boolean
  linkOnlineLesson: String
  workTime: WorkTimeRelateToManyForCreateInput
  cutoff: WorkTimeCutoffRelateToManyForCreateInput
  timeZone: String
  calendar: String
  comment: String
  createdAt: DateTime
  lastModification: DateTime
}

input WorkTimeRelateToManyForCreateInput {
  create: [WorkTimeCreateInput!]
  connect: [WorkTimeWhereUniqueInput!]
}

input WorkTimeCutoffRelateToManyForCreateInput {
  create: [WorkTimeCutoffCreateInput!]
  connect: [WorkTimeCutoffWhereUniqueInput!]
}

type WorkTime {
  id: ID!
  manager: Manager
  dayOfWeek: Int
  isDayOff: Boolean
  startTime: String
  endTime: String
  createdAt: DateTime
  lastModification: DateTime
}

input WorkTimeWhereUniqueInput {
  id: ID
}

input WorkTimeWhereInput {
  AND: [WorkTimeWhereInput!]
  OR: [WorkTimeWhereInput!]
  NOT: [WorkTimeWhereInput!]
  id: IDFilter
  manager: ManagerWhereInput
  dayOfWeek: IntFilter
  isDayOff: BooleanFilter
  startTime: StringFilter
  endTime: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input WorkTimeOrderByInput {
  id: OrderDirection
  dayOfWeek: OrderDirection
  isDayOff: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input WorkTimeUpdateInput {
  manager: ManagerRelateToOneForUpdateInput
  dayOfWeek: Int
  isDayOff: Boolean
  startTime: String
  endTime: String
  createdAt: DateTime
  lastModification: DateTime
}

input WorkTimeUpdateArgs {
  where: WorkTimeWhereUniqueInput!
  data: WorkTimeUpdateInput!
}

input WorkTimeCreateInput {
  manager: ManagerRelateToOneForCreateInput
  dayOfWeek: Int
  isDayOff: Boolean
  startTime: String
  endTime: String
  createdAt: DateTime
  lastModification: DateTime
}

type WorkTimeCutoff {
  id: ID!
  label: String
  statusView: String
  title: String
  uid: String
  manager: Manager
  startTime: DateTime
  endTime: DateTime
  createdAt: DateTime
  lastModification: DateTime
}

input WorkTimeCutoffWhereUniqueInput {
  id: ID
}

input WorkTimeCutoffWhereInput {
  AND: [WorkTimeCutoffWhereInput!]
  OR: [WorkTimeCutoffWhereInput!]
  NOT: [WorkTimeCutoffWhereInput!]
  id: IDFilter
  statusView: StringFilter
  title: StringFilter
  uid: StringFilter
  manager: ManagerWhereInput
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input WorkTimeCutoffOrderByInput {
  id: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  uid: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input WorkTimeCutoffUpdateInput {
  statusView: String
  title: String
  uid: String
  manager: ManagerRelateToOneForUpdateInput
  startTime: DateTime
  endTime: DateTime
  createdAt: DateTime
  lastModification: DateTime
}

input WorkTimeCutoffUpdateArgs {
  where: WorkTimeCutoffWhereUniqueInput!
  data: WorkTimeCutoffUpdateInput!
}

input WorkTimeCutoffCreateInput {
  statusView: String
  title: String
  uid: String
  manager: ManagerRelateToOneForCreateInput
  startTime: DateTime
  endTime: DateTime
  createdAt: DateTime
  lastModification: DateTime
}

type Lesson {
  id: ID!
  statusLesson: String
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  trial: Boolean
  burned: Boolean
  students(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  studentsCount(where: UserWhereInput! = {}): Int
  subscription: UserSubscription
  teachers(where: ManagerWhereInput! = {}, orderBy: [ManagerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Manager!]
  teachersCount(where: ManagerWhereInput! = {}): Int
  comment: String
  timeZone: String
  notified: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

input LessonWhereUniqueInput {
  id: ID
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  id: IDFilter
  statusLesson: StringFilter
  title: StringFilter
  description: StringFilter
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  trial: BooleanFilter
  burned: BooleanFilter
  students: UserManyRelationFilter
  subscription: UserSubscriptionWhereInput
  teachers: ManagerManyRelationFilter
  comment: StringFilter
  timeZone: StringFilter
  notified: BooleanFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input LessonOrderByInput {
  id: OrderDirection
  statusLesson: OrderDirection
  title: OrderDirection
  description: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  trial: OrderDirection
  burned: OrderDirection
  comment: OrderDirection
  timeZone: OrderDirection
  notified: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input LessonUpdateInput {
  statusLesson: String
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  trial: Boolean
  burned: Boolean
  students: UserRelateToManyForUpdateInput
  subscription: UserSubscriptionRelateToOneForUpdateInput
  teachers: ManagerRelateToManyForUpdateInput
  comment: String
  timeZone: String
  notified: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserSubscriptionRelateToOneForUpdateInput {
  create: UserSubscriptionCreateInput
  connect: UserSubscriptionWhereUniqueInput
  disconnect: Boolean
}

input LessonUpdateArgs {
  where: LessonWhereUniqueInput!
  data: LessonUpdateInput!
}

input LessonCreateInput {
  statusLesson: String
  title: String
  description: String
  startTime: DateTime
  endTime: DateTime
  trial: Boolean
  burned: Boolean
  students: UserRelateToManyForCreateInput
  subscription: UserSubscriptionRelateToOneForCreateInput
  teachers: ManagerRelateToManyForCreateInput
  comment: String
  timeZone: String
  notified: Boolean
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserSubscriptionRelateToOneForCreateInput {
  create: UserSubscriptionCreateInput
  connect: UserSubscriptionWhereUniqueInput
}

type Mailing {
  id: ID!
  language: String
  status: String
  clients(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  clientsCount(where: UserWhereInput! = {}): Int
  statusClient: [MailingStatusClientType!]
  title: String
  content: Mailing_content_Document
  createdAt: DateTime
  lastModification: DateTime
}

enum MailingStatusClientType {
  new
  firstCall
  recordFirstLesson
  trialLesson
  decisionAfterTrialLesson
  LowQualityLead
  client
  finishedClient
  disabledClient
  rejection
}

type Mailing_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input MailingWhereUniqueInput {
  id: ID
}

input MailingWhereInput {
  AND: [MailingWhereInput!]
  OR: [MailingWhereInput!]
  NOT: [MailingWhereInput!]
  id: IDFilter
  language: StringFilter
  status: StringFilter
  clients: UserManyRelationFilter
  title: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input MailingOrderByInput {
  id: OrderDirection
  language: OrderDirection
  status: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input MailingUpdateInput {
  language: String
  status: String
  clients: UserRelateToManyForUpdateInput
  statusClient: [MailingStatusClientType!]
  title: String
  content: JSON
  createdAt: DateTime
  lastModification: DateTime
}

input MailingUpdateArgs {
  where: MailingWhereUniqueInput!
  data: MailingUpdateInput!
}

input MailingCreateInput {
  language: String
  status: String
  clients: UserRelateToManyForCreateInput
  statusClient: [MailingStatusClientType!]
  title: String
  content: JSON
  createdAt: DateTime
  lastModification: DateTime
}

type Image {
  id: ID!
  name: String
  type: String
  filename: String
  image: ImageFieldOutput
}

input ImageWhereUniqueInput {
  id: ID
  filename: String
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringFilter
  filename: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  filename: OrderDirection
}

input ImageUpdateInput {
  name: String
  type: String
  filename: String
  image: ImageFieldInput
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  type: String
  filename: String
  image: ImageFieldInput
}

type Currency {
  id: ID!
  charCode: String
  nominal: Int
  value: Int
  createdAt: DateTime
  lastModification: DateTime
}

input CurrencyWhereUniqueInput {
  id: ID
  charCode: String
}

input CurrencyWhereInput {
  AND: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  id: IDFilter
  charCode: StringFilter
  nominal: IntFilter
  value: IntFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input CurrencyOrderByInput {
  id: OrderDirection
  charCode: OrderDirection
  nominal: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input CurrencyUpdateInput {
  charCode: String
  nominal: Int
  value: Int
  createdAt: DateTime
  lastModification: DateTime
}

input CurrencyUpdateArgs {
  where: CurrencyWhereUniqueInput!
  data: CurrencyUpdateInput!
}

input CurrencyCreateInput {
  charCode: String
  nominal: Int
  value: Int
  createdAt: DateTime
  lastModification: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(where: CartItemWhereUniqueInput!, data: CartItemUpdateInput!): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createDirection(data: DirectionCreateInput!): Direction
  createDirections(data: [DirectionCreateInput!]!): [Direction]
  updateDirection(where: DirectionWhereUniqueInput!, data: DirectionUpdateInput!): Direction
  updateDirections(data: [DirectionUpdateArgs!]!): [Direction]
  deleteDirection(where: DirectionWhereUniqueInput!): Direction
  deleteDirections(where: [DirectionWhereUniqueInput!]!): [Direction]
  createDirectionGoal(data: DirectionGoalCreateInput!): DirectionGoal
  createDirectionGoals(data: [DirectionGoalCreateInput!]!): [DirectionGoal]
  updateDirectionGoal(where: DirectionGoalWhereUniqueInput!, data: DirectionGoalUpdateInput!): DirectionGoal
  updateDirectionGoals(data: [DirectionGoalUpdateArgs!]!): [DirectionGoal]
  deleteDirectionGoal(where: DirectionGoalWhereUniqueInput!): DirectionGoal
  deleteDirectionGoals(where: [DirectionGoalWhereUniqueInput!]!): [DirectionGoal]
  createDirectionResult(data: DirectionResultCreateInput!): DirectionResult
  createDirectionResults(data: [DirectionResultCreateInput!]!): [DirectionResult]
  updateDirectionResult(where: DirectionResultWhereUniqueInput!, data: DirectionResultUpdateInput!): DirectionResult
  updateDirectionResults(data: [DirectionResultUpdateArgs!]!): [DirectionResult]
  deleteDirectionResult(where: DirectionResultWhereUniqueInput!): DirectionResult
  deleteDirectionResults(where: [DirectionResultWhereUniqueInput!]!): [DirectionResult]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductReview(data: ProductReviewCreateInput!): ProductReview
  createProductReviews(data: [ProductReviewCreateInput!]!): [ProductReview]
  updateProductReview(where: ProductReviewWhereUniqueInput!, data: ProductReviewUpdateInput!): ProductReview
  updateProductReviews(data: [ProductReviewUpdateArgs!]!): [ProductReview]
  deleteProductReview(where: ProductReviewWhereUniqueInput!): ProductReview
  deleteProductReviews(where: [ProductReviewWhereUniqueInput!]!): [ProductReview]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAvatarUser(data: AvatarUserCreateInput!): AvatarUser
  createAvatarUsers(data: [AvatarUserCreateInput!]!): [AvatarUser]
  updateAvatarUser(where: AvatarUserWhereUniqueInput!, data: AvatarUserUpdateInput!): AvatarUser
  updateAvatarUsers(data: [AvatarUserUpdateArgs!]!): [AvatarUser]
  deleteAvatarUser(where: AvatarUserWhereUniqueInput!): AvatarUser
  deleteAvatarUsers(where: [AvatarUserWhereUniqueInput!]!): [AvatarUser]
  createSourceClient(data: SourceClientCreateInput!): SourceClient
  createSourceClients(data: [SourceClientCreateInput!]!): [SourceClient]
  updateSourceClient(where: SourceClientWhereUniqueInput!, data: SourceClientUpdateInput!): SourceClient
  updateSourceClients(data: [SourceClientUpdateArgs!]!): [SourceClient]
  deleteSourceClient(where: SourceClientWhereUniqueInput!): SourceClient
  deleteSourceClients(where: [SourceClientWhereUniqueInput!]!): [SourceClient]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(where: SubscriptionWhereUniqueInput!, data: SubscriptionUpdateInput!): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createUserSubscription(data: UserSubscriptionCreateInput!): UserSubscription
  createUserSubscriptions(data: [UserSubscriptionCreateInput!]!): [UserSubscription]
  updateUserSubscription(where: UserSubscriptionWhereUniqueInput!, data: UserSubscriptionUpdateInput!): UserSubscription
  updateUserSubscriptions(data: [UserSubscriptionUpdateArgs!]!): [UserSubscription]
  deleteUserSubscription(where: UserSubscriptionWhereUniqueInput!): UserSubscription
  deleteUserSubscriptions(where: [UserSubscriptionWhereUniqueInput!]!): [UserSubscription]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createUserService(data: UserServiceCreateInput!): UserService
  createUserServices(data: [UserServiceCreateInput!]!): [UserService]
  updateUserService(where: UserServiceWhereUniqueInput!, data: UserServiceUpdateInput!): UserService
  updateUserServices(data: [UserServiceUpdateArgs!]!): [UserService]
  deleteUserService(where: UserServiceWhereUniqueInput!): UserService
  deleteUserServices(where: [UserServiceWhereUniqueInput!]!): [UserService]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createMarketing(data: MarketingCreateInput!): Marketing
  createMarketings(data: [MarketingCreateInput!]!): [Marketing]
  updateMarketing(where: MarketingWhereUniqueInput!, data: MarketingUpdateInput!): Marketing
  updateMarketings(data: [MarketingUpdateArgs!]!): [Marketing]
  deleteMarketing(where: MarketingWhereUniqueInput!): Marketing
  deleteMarketings(where: [MarketingWhereUniqueInput!]!): [Marketing]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createManager(data: ManagerCreateInput!): Manager
  createManagers(data: [ManagerCreateInput!]!): [Manager]
  updateManager(where: ManagerWhereUniqueInput!, data: ManagerUpdateInput!): Manager
  updateManagers(data: [ManagerUpdateArgs!]!): [Manager]
  deleteManager(where: ManagerWhereUniqueInput!): Manager
  deleteManagers(where: [ManagerWhereUniqueInput!]!): [Manager]
  createWorkTime(data: WorkTimeCreateInput!): WorkTime
  createWorkTimes(data: [WorkTimeCreateInput!]!): [WorkTime]
  updateWorkTime(where: WorkTimeWhereUniqueInput!, data: WorkTimeUpdateInput!): WorkTime
  updateWorkTimes(data: [WorkTimeUpdateArgs!]!): [WorkTime]
  deleteWorkTime(where: WorkTimeWhereUniqueInput!): WorkTime
  deleteWorkTimes(where: [WorkTimeWhereUniqueInput!]!): [WorkTime]
  createWorkTimeCutoff(data: WorkTimeCutoffCreateInput!): WorkTimeCutoff
  createWorkTimeCutoffs(data: [WorkTimeCutoffCreateInput!]!): [WorkTimeCutoff]
  updateWorkTimeCutoff(where: WorkTimeCutoffWhereUniqueInput!, data: WorkTimeCutoffUpdateInput!): WorkTimeCutoff
  updateWorkTimeCutoffs(data: [WorkTimeCutoffUpdateArgs!]!): [WorkTimeCutoff]
  deleteWorkTimeCutoff(where: WorkTimeCutoffWhereUniqueInput!): WorkTimeCutoff
  deleteWorkTimeCutoffs(where: [WorkTimeCutoffWhereUniqueInput!]!): [WorkTimeCutoff]
  createLesson(data: LessonCreateInput!): Lesson
  createLessons(data: [LessonCreateInput!]!): [Lesson]
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson
  updateLessons(data: [LessonUpdateArgs!]!): [Lesson]
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteLessons(where: [LessonWhereUniqueInput!]!): [Lesson]
  createMailing(data: MailingCreateInput!): Mailing
  createMailings(data: [MailingCreateInput!]!): [Mailing]
  updateMailing(where: MailingWhereUniqueInput!, data: MailingUpdateInput!): Mailing
  updateMailings(data: [MailingUpdateArgs!]!): [Mailing]
  deleteMailing(where: MailingWhereUniqueInput!): Mailing
  deleteMailings(where: [MailingWhereUniqueInput!]!): [Mailing]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createCurrency(data: CurrencyCreateInput!): Currency
  createCurrencies(data: [CurrencyCreateInput!]!): [Currency]
  updateCurrency(where: CurrencyWhereUniqueInput!, data: CurrencyUpdateInput!): Currency
  updateCurrencies(data: [CurrencyUpdateArgs!]!): [Currency]
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteCurrencies(where: [CurrencyWhereUniqueInput!]!): [Currency]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(email: String!, token: String!): RedeemUserMagicAuthTokenResult!
  authWithEmail(email: String!): String
  checkout(userId: String!, currency: String!): PaymentResponse
  payment(orderId: String!): PaymentResponse
  cart(data: CartData!): PaymentResponse
  authCart(data: AuthCartData!): Client
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: UserRoleType
}

union RedeemUserMagicAuthTokenResult = RedeemUserMagicAuthTokenSuccess | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  carts(where: CartWhereInput! = {}, orderBy: [CartOrderByInput!]! = [], take: Int, skip: Int! = 0): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  cartItems(where: CartItemWhereInput! = {}, orderBy: [CartItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  directions(where: DirectionWhereInput! = {}, orderBy: [DirectionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Direction!]
  direction(where: DirectionWhereUniqueInput!): Direction
  directionsCount(where: DirectionWhereInput! = {}): Int
  directionGoals(where: DirectionGoalWhereInput! = {}, orderBy: [DirectionGoalOrderByInput!]! = [], take: Int, skip: Int! = 0): [DirectionGoal!]
  directionGoal(where: DirectionGoalWhereUniqueInput!): DirectionGoal
  directionGoalsCount(where: DirectionGoalWhereInput! = {}): Int
  directionResults(where: DirectionResultWhereInput! = {}, orderBy: [DirectionResultOrderByInput!]! = [], take: Int, skip: Int! = 0): [DirectionResult!]
  directionResult(where: DirectionResultWhereUniqueInput!): DirectionResult
  directionResultsCount(where: DirectionResultWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productReviews(where: ProductReviewWhereInput! = {}, orderBy: [ProductReviewOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProductReview!]
  productReview(where: ProductReviewWhereUniqueInput!): ProductReview
  productReviewsCount(where: ProductReviewWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  avatarUsers(where: AvatarUserWhereInput! = {}, orderBy: [AvatarUserOrderByInput!]! = [], take: Int, skip: Int! = 0): [AvatarUser!]
  avatarUser(where: AvatarUserWhereUniqueInput!): AvatarUser
  avatarUsersCount(where: AvatarUserWhereInput! = {}): Int
  sourceClients(where: SourceClientWhereInput! = {}, orderBy: [SourceClientOrderByInput!]! = [], take: Int, skip: Int! = 0): [SourceClient!]
  sourceClient(where: SourceClientWhereUniqueInput!): SourceClient
  sourceClientsCount(where: SourceClientWhereInput! = {}): Int
  subscriptions(where: SubscriptionWhereInput! = {}, orderBy: [SubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  userSubscriptions(where: UserSubscriptionWhereInput! = {}, orderBy: [UserSubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserSubscription!]
  userSubscription(where: UserSubscriptionWhereUniqueInput!): UserSubscription
  userSubscriptionsCount(where: UserSubscriptionWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [Service!]
  service(where: ServiceWhereUniqueInput!): Service
  servicesCount(where: ServiceWhereInput! = {}): Int
  userServices(where: UserServiceWhereInput! = {}, orderBy: [UserServiceOrderByInput!]! = [], take: Int, skip: Int! = 0): [UserService!]
  userService(where: UserServiceWhereUniqueInput!): UserService
  userServicesCount(where: UserServiceWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  faqs(where: FaqWhereInput! = {}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  marketings(where: MarketingWhereInput! = {}, orderBy: [MarketingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Marketing!]
  marketing(where: MarketingWhereUniqueInput!): Marketing
  marketingsCount(where: MarketingWhereInput! = {}): Int
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0): [Client!]
  client(where: ClientWhereUniqueInput!): Client
  clientsCount(where: ClientWhereInput! = {}): Int
  managers(where: ManagerWhereInput! = {}, orderBy: [ManagerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Manager!]
  manager(where: ManagerWhereUniqueInput!): Manager
  managersCount(where: ManagerWhereInput! = {}): Int
  workTimes(where: WorkTimeWhereInput! = {}, orderBy: [WorkTimeOrderByInput!]! = [], take: Int, skip: Int! = 0): [WorkTime!]
  workTime(where: WorkTimeWhereUniqueInput!): WorkTime
  workTimesCount(where: WorkTimeWhereInput! = {}): Int
  workTimeCutoffs(where: WorkTimeCutoffWhereInput! = {}, orderBy: [WorkTimeCutoffOrderByInput!]! = [], take: Int, skip: Int! = 0): [WorkTimeCutoff!]
  workTimeCutoff(where: WorkTimeCutoffWhereUniqueInput!): WorkTimeCutoff
  workTimeCutoffsCount(where: WorkTimeCutoffWhereInput! = {}): Int
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Lesson!]
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessonsCount(where: LessonWhereInput! = {}): Int
  mailings(where: MailingWhereInput! = {}, orderBy: [MailingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Mailing!]
  mailing(where: MailingWhereUniqueInput!): Mailing
  mailingsCount(where: MailingWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  currencies(where: CurrencyWhereInput! = {}, orderBy: [CurrencyOrderByInput!]! = [], take: Int, skip: Int! = 0): [Currency!]
  currency(where: CurrencyWhereUniqueInput!): Currency
  currenciesCount(where: CurrencyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  checkPayment(paymentId: String!): Payment
  unavailableTimesForRecordLesson(data: UnavailableTimesForRecordLessonData!): [UnavailableTimesForRecordLessonResponse]
  nextStudentLesson(studentId: ID!): Object
  getTeacherSchedule(data: GetTeacherScheduleData!): GetTeacherScheduleResponse!
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

scalar Object

type PaymentResponse {
  status: Boolean!
  redirectUrl: String!
}

input CartData {
  firstName: String
  secondName: String
  phone: Decimal
  email: String!
  currency: String!
  language: String
}

input AuthCartData {
  firstName: String!
  secondName: String!
  phone: Decimal!
  email: String!
  language: String
}

input UnavailableTimesForRecordLessonData {
  date: String!
  teacherId: ID!
}

type UnavailableTimesForRecordLessonResponse {
  startTime: String!
  endTime: String!
}

input GetTeacherScheduleData {
  start: String!
  end: String!
  teacherId: ID!
}

type GetTeacherScheduleResponse {
  lessons: [Object!]
  cutoff: [Object!]
}

import { KeystoneContext } from "@keystone-6/core/dist/declarations/src/types";
import { UserCreateInput } from ".keystone/types";
import { Roles } from "../enums/roles.enum";
import { clientStatusParser } from "../lib/clientStatusParser";
import { levelStudentParser } from "../lib/levelStudentParser";
import clients from "./clients.json";

export async function insertSeedData(context: KeystoneContext) {
  console.log(`üå± Inserting seed data`);

  const createPerson = async (personData: UserCreateInput) => {
    let person = await context.query.User.findOne({
      where: { email: personData.email },
      query: "id",
    });

    if (!person) {
      person = await context.query.User.createOne({
        data: personData,
        query: "id",
      });
    }
  };

  // const createReview = async (
  //   reviewData: ProductReviewCreateInput,
  // ) => {
  //
  //   let review = await context.query.ProductReview.createOne({
  //     data: { ...reviewData },
  //     query: "id",
  //   });
  // };

  for (const client of clients) {
    console.log(`üë© Adding person: ${client["–§–ò–û"]}`);
    const person = {
      language: "ru",
      name: client["–§–ò–û"],
      email: client["Email"],
      phone: client["–¢–µ–ª–µ—Ñ–æ–Ω"],
      statusClient: clientStatusParser(client["–°—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞"]),
      levelStudent: levelStudentParser(client["–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"]),
      goal: client["–¶–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞"],
      role: Roles.Student,
      comment: `–ò—Å—Ç–æ—á–Ω–∏–∫: ${client["–ò—Å—Ç–æ—á–Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞"]}, –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${client["–î–æ–ª–∂–Ω–æ—Å—Ç—å"]}, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${client["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]}`,
    };
    await createPerson(person);
  }

  // for (const item of reviews) {
  //   console.log(`üë© Adding review: ${item["comment_author"]}`);
  //   const review = {
  //     language: "ru",
  //     desc: item["comment_content"],
  //   };
  //   await createReview(review);
  // }

  console.log(`‚úÖ Seed data inserted`);
  console.log(
    `üëã Please start the process with \`yarn dev\` or \`npm run dev\``
  );
  process.exit();
}

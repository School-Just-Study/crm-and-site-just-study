// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Cart {
  id               Int            @id @default(autoincrement())
  user             User?          @relation("Cart_user", fields: [userId], references: [id])
  userId           Int?           @map("user")
  subscriptions    Subscription[] @relation("Cart_subscriptions")
  services         Service[]      @relation("Cart_services")
  quantityPayments Int?           @default(1)
  lastModification DateTime       @default(now()) @updatedAt

  @@index([userId])
}

model Category {
  id                      Int        @id @default(autoincrement())
  language                String     @default("ru")
  name                    String     @default("")
  parent                  Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId                Int?       @map("parent")
  products                Product[]  @relation("Category_products")
  statusView              String     @default("draft")
  createdAt               DateTime   @default(now())
  lastModification        DateTime   @default(now()) @updatedAt
  from_Category_parent    Category[] @relation("Category_parent")
  from_Product_categories Product[]  @relation("Product_categories")
  from_Service_categories Service[]  @relation("Service_categories")

  @@index([language])
  @@index([parentId])
}

model Order {
  id               Int              @id @default(autoincrement())
  student          User?            @relation("Order_student", fields: [studentId], references: [id])
  studentId        Int?             @map("student")
  leftPayments     Int              @default(1)
  payments         Payment[]        @relation("Payment_order")
  employee         User?            @relation("Order_employee", fields: [employeeId], references: [id])
  employeeId       Int?             @map("employee")
  status           OrderStatusType? @default(created)
  subscriptions    Subscription[]   @relation("Order_subscriptions")
  services         Service[]        @relation("Order_services")
  amount           Int?
  createdAt        DateTime         @default(now())
  lastModification DateTime         @default(now()) @updatedAt

  @@index([studentId])
  @@index([employeeId])
}

model Payment {
  id               Int               @id @default(autoincrement())
  order            Order?            @relation("Payment_order", fields: [orderId], references: [id])
  orderId          Int?              @map("order")
  student          User?             @relation("Payment_student", fields: [studentId], references: [id])
  studentId        Int?              @map("student")
  sum              Int?              @default(0)
  externalId       String            @default("")
  receiptId        String            @default("")
  status           PaymentStatusType @default(created)
  createdAt        DateTime          @default(now())
  lastModification DateTime          @default(now()) @updatedAt

  @@index([orderId])
  @@index([studentId])
}

model Product {
  id                          Int             @id @default(autoincrement())
  language                    String          @default("ru")
  statusView                  String          @default("draft")
  name                        String          @default("")
  description                 String          @default("")
  categories                  Category[]      @relation("Product_categories")
  images_filesize             Int?
  images_extension            String?
  images_width                Int?
  images_height               Int?
  images_id                   String?
  price                       Int?            @default(0)
  tag                         Tag[]           @relation("Product_tag")
  createdAt                   DateTime        @default(now())
  lastModification            DateTime        @default(now()) @updatedAt
  from_Category_products      Category[]      @relation("Category_products")
  from_ProductReview_products ProductReview[] @relation("ProductReview_products")
  from_Faq_products           Faq[]           @relation("Faq_products")

  @@index([language])
}

model ProductReview {
  id               Int       @id @default(autoincrement())
  language         String    @default("ru")
  statusView       String    @default("draft")
  student          User?     @relation("ProductReview_student", fields: [studentId], references: [id])
  studentId        Int?      @map("student")
  products         Product[] @relation("ProductReview_products")
  desc             String    @default("") @mysql.VarChar(10000)
  media            String    @default("")
  createdAt        DateTime  @default(now())
  lastModification DateTime  @default(now()) @updatedAt

  @@index([language])
  @@index([studentId])
}

model User {
  id                            Int                   @id @default(autoincrement())
  language                      String                @default("ru")
  avatar                        AvatarUser?           @relation("AvatarUser_user")
  name                          String                @default("")
  email                         String                @unique @default("")
  password                      String?
  phone                         String                @default("")
  statusClient                  UserStatusClientType? @default(new)
  levelStudent                  UserLevelStudentType? @default(a1)
  goal                          String                @default("")
  source                        SourceClient[]        @relation("User_source")
  role                          UserRoleType?         @default(student)
  comment                       String                @default("")
  createdAt                     DateTime              @default(now())
  lastModification              DateTime              @default(now()) @updatedAt
  from_Cart_user                Cart[]                @relation("Cart_user")
  from_Order_student            Order[]               @relation("Order_student")
  from_Order_employee           Order[]               @relation("Order_employee")
  from_Payment_student          Payment[]             @relation("Payment_student")
  from_ProductReview_student    ProductReview[]       @relation("ProductReview_student")
  from_UserSubscription_student UserSubscription[]    @relation("UserSubscription_student")
  from_UserSubscription_manager UserSubscription[]    @relation("UserSubscription_manager")
  from_UserService_student      UserService[]         @relation("UserService_student")
  from_UserService_manager      UserService[]         @relation("UserService_manager")
  from_Page_author              Page[]                @relation("Page_author")

  @@index([language])
}

model AvatarUser {
  id               Int      @id @default(autoincrement())
  user             User?    @relation("AvatarUser_user", fields: [userId], references: [id])
  userId           Int?     @unique @map("user")
  image_filesize   Int?
  image_extension  String?
  image_width      Int?
  image_height     Int?
  image_id         String?
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt
}

model SourceClient {
  id                       Int            @id @default(autoincrement())
  name                     String         @default("")
  parent                   SourceClient?  @relation("SourceClient_parent", fields: [parentId], references: [id])
  parentId                 Int?           @map("parent")
  createdAt                DateTime       @default(now())
  lastModification         DateTime       @default(now()) @updatedAt
  from_User_source         User[]         @relation("User_source")
  from_SourceClient_parent SourceClient[] @relation("SourceClient_parent")

  @@index([parentId])
}

model Subscription {
  id                       Int                @id @default(autoincrement())
  language                 String             @default("ru")
  statusView               String             @default("draft")
  name                     String             @default("")
  visitCount               Int                @default(10)
  price                    Int
  period                   Int?               @default(45)
  items                    UserSubscription[] @relation("UserSubscription_pattern")
  createdAt                DateTime           @default(now())
  lastModification         DateTime           @default(now()) @updatedAt
  from_Cart_subscriptions  Cart[]             @relation("Cart_subscriptions")
  from_Order_subscriptions Order[]            @relation("Order_subscriptions")

  @@index([language])
}

model UserSubscription {
  id               Int           @id @default(autoincrement())
  pattern          Subscription? @relation("UserSubscription_pattern", fields: [patternId], references: [id])
  patternId        Int?          @map("pattern")
  name             String        @default("")
  visitCount       Int?
  originalPrice    Int?
  price            Int?
  period           Int?
  status           String        @default("inactive")
  student          User?         @relation("UserSubscription_student", fields: [studentId], references: [id])
  studentId        Int?          @map("student")
  beginDate        DateTime?     @default(now())
  payed            Int?
  totalVisited     Int           @default(0)
  totalBurned      Int           @default(0)
  manager          User?         @relation("UserSubscription_manager", fields: [managerId], references: [id])
  managerId        Int?          @map("manager")
  createdAt        DateTime      @default(now())
  lastModification DateTime      @default(now()) @updatedAt

  @@index([patternId])
  @@index([studentId])
  @@index([managerId])
}

model Service {
  id                  Int           @id @default(autoincrement())
  language            String        @default("ru")
  statusView          String        @default("draft")
  name                String        @default("")
  description         String        @default("")
  categories          Category[]    @relation("Service_categories")
  price               Int?          @default(0)
  items               UserService[] @relation("UserService_pattern")
  createdAt           DateTime      @default(now())
  lastModification    DateTime      @default(now()) @updatedAt
  from_Cart_services  Cart[]        @relation("Cart_services")
  from_Order_services Order[]       @relation("Order_services")

  @@index([language])
}

model UserService {
  id               Int      @id @default(autoincrement())
  pattern          Service? @relation("UserService_pattern", fields: [patternId], references: [id])
  patternId        Int?     @map("pattern")
  name             String   @default("")
  originalPrice    Int?
  price            Int?
  student          User?    @relation("UserService_student", fields: [studentId], references: [id])
  studentId        Int?     @map("student")
  payed            Int?
  manager          User?    @relation("UserService_manager", fields: [managerId], references: [id])
  managerId        Int?     @map("manager")
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([patternId])
  @@index([studentId])
  @@index([managerId])
}

model Page {
  id               Int      @id @default(autoincrement())
  language         String   @default("ru")
  statusView       String   @default("draft")
  title            String   @default("")
  slug             String   @default("")
  description      String   @default("") @mysql.VarChar(10000)
  content          Json     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  tag              Tag[]    @relation("Page_tag")
  author           User?    @relation("Page_author", fields: [authorId], references: [id])
  authorId         Int?     @map("author")
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([language])
  @@index([slug])
  @@index([authorId])
}

model Tag {
  id               Int       @id @default(autoincrement())
  language         String    @default("ru")
  name             String    @default("")
  createdAt        DateTime  @default(now())
  lastModification DateTime  @default(now()) @updatedAt
  from_Product_tag Product[] @relation("Product_tag")
  from_Page_tag    Page[]    @relation("Page_tag")

  @@index([language])
}

model Faq {
  id               Int       @id @default(autoincrement())
  language         String    @default("ru")
  statusView       String    @default("draft")
  products         Product[] @relation("Faq_products")
  title            String    @default("")
  desc             String    @default("") @mysql.VarChar(1000)
  createdAt        DateTime  @default(now())
  lastModification DateTime  @default(now()) @updatedAt

  @@index([language])
}

enum OrderStatusType {
  created
  frozen
  processing
  finished
  cancelled
}

enum PaymentStatusType {
  created
  successfully
  cancelled
  error
}

enum UserStatusClientType {
  new
  firstCall
  recordFirstLesson
  trialLesson
  decisionAfterTrialLesson
  LowQualityLead
  client
  disabledClient
  rejection
}

enum UserLevelStudentType {
  a1
  a2
  b1
  b2
  c1
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}
// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Cart {
  id           String    @id @default(cuid())
  user         User?     @relation("Cart_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  products     Product[] @relation("Cart_products")
  lastModified DateTime? @default(now()) @updatedAt
  sum          Decimal   @default("0") @postgresql.Decimal(18, 0)

  @@index([userId])
}

model Category {
  id                      String     @id @default(cuid())
  language                String?    @default("ru")
  name                    String     @default("")
  parent                  Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId                String?    @map("parent")
  products                Product[]  @relation("Category_products")
  status                  String?    @default("draft")
  createdAt               DateTime?  @default(now())
  lastModification        DateTime?  @default(now()) @updatedAt
  from_Category_parent    Category[] @relation("Category_parent")
  from_Product_categories Product[]  @relation("Product_categories")

  @@index([parentId])
}

model Order {
  id                 String           @id @default(cuid())
  student            User?            @relation("Order_student", fields: [studentId], references: [id])
  studentId          String?          @map("student")
  products           Json?
  payment            Payment?         @relation("Order_payment", fields: [paymentId], references: [id])
  paymentId          String?          @map("payment")
  employee           User?            @relation("Order_employee", fields: [employeeId], references: [id])
  employeeId         String?          @map("employee")
  status             OrderStatusType?
  createdAt          DateTime?        @default(now())
  lastModification   DateTime?        @default(now()) @updatedAt
  from_Payment_order Payment[]        @relation("Payment_order")

  @@index([studentId])
  @@index([paymentId])
  @@index([employeeId])
}

model Payment {
  id                 String             @id @default(cuid())
  order              Order?             @relation("Payment_order", fields: [orderId], references: [id])
  orderId            String?            @map("order")
  sum                Decimal?           @postgresql.Decimal(18, 0)
  externalId         String             @default("")
  status             PaymentStatusType?
  createdAt          DateTime?          @default(now())
  lastModification   DateTime?          @default(now()) @updatedAt
  from_Order_payment Order[]            @relation("Order_payment")

  @@index([orderId])
}

model Product {
  id                          String             @id @default(cuid())
  language                    String?            @default("ru")
  name                        String             @default("")
  description                 String             @default("")
  categories                  Category[]         @relation("Product_categories")
  status                      ProductStatusType? @default(draft)
  images_filesize             Int?
  images_extension            String?
  images_width                Int?
  images_height               Int?
  images_id                   String?
  price                       Decimal?           @postgresql.Decimal(18, 0)
  createdAt                   DateTime?          @default(now())
  lastModification            DateTime?          @default(now()) @updatedAt
  from_Cart_products          Cart[]             @relation("Cart_products")
  from_Category_products      Category[]         @relation("Category_products")
  from_ProductReview_products ProductReview[]    @relation("ProductReview_products")
}

model ProductReview {
  id               String                   @id @default(cuid())
  language         String?                  @default("ru")
  student          User?                    @relation("ProductReview_student", fields: [studentId], references: [id])
  studentId        String?                  @map("student")
  products         Product[]                @relation("ProductReview_products")
  status           ProductReviewStatusType? @default(draft)
  desc             String                   @default("")
  media            String                   @default("")
  createdAt        DateTime?                @default(now())
  lastModification DateTime?                @default(now()) @updatedAt

  @@index([studentId])
}

model User {
  id                         String                @id @default(cuid())
  language                   String?               @default("ru")
  name                       String                @default("")
  lastName                   String                @default("")
  email                      String                @unique @default("")
  password                   String
  phone                      String                @default("")
  statusClient               UserStatusClientType? @default(new)
  levelStudent               UserLevelStudentType? @default(a1)
  goal                       String                @default("")
  source                     SourceClient[]        @relation("User_source")
  role                       UserRoleType?         @default(student)
  createdAt                  DateTime?             @default(now())
  lastModification           DateTime?             @default(now()) @updatedAt
  from_Cart_user             Cart[]                @relation("Cart_user")
  from_Order_student         Order[]               @relation("Order_student")
  from_Order_employee        Order[]               @relation("Order_employee")
  from_ProductReview_student ProductReview[]       @relation("ProductReview_student")
}

model SourceClient {
  id                       String         @id @default(cuid())
  name                     String         @default("")
  parent                   SourceClient?  @relation("SourceClient_parent", fields: [parentId], references: [id])
  parentId                 String?        @map("parent")
  createdAt                DateTime?      @default(now())
  lastModification         DateTime?      @default(now()) @updatedAt
  from_User_source         User[]         @relation("User_source")
  from_SourceClient_parent SourceClient[] @relation("SourceClient_parent")

  @@index([parentId])
}

enum OrderStatusType {
  created
  frozen
  processing
  finished
}

enum PaymentStatusType {
  created
  successfully
  cancelled
}

enum ProductStatusType {
  draft
  hide
  show
  archive
}

enum ProductReviewStatusType {
  draft
  hide
  show
  archive
}

enum UserStatusClientType {
  new
  firstCall
  recordFirstLesson
  trialLesson
  decisionAfterTrialLesson
  LowQualityLead
  client
  disabledClient
  rejection
}

enum UserLevelStudentType {
  a1
  a2
  b1
  b2
  c1
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}
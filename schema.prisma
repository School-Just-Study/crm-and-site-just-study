// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Cart {
  id               Int        @id @default(autoincrement())
  user             User?      @relation("Cart_user", fields: [userId], references: [id])
  userId           Int?       @unique @map("user")
  currency         String     @default("RUB")
  items            CartItem[] @relation("CartItem_cart")
  quantityPayments Int?       @default(1)
  lastModification DateTime   @default(now()) @updatedAt
}

model CartItem {
  id             Int           @id @default(autoincrement())
  cart           Cart?         @relation("CartItem_cart", fields: [cartId], references: [id])
  cartId         Int?          @map("cart")
  subscription   Subscription? @relation("CartItem_subscription", fields: [subscriptionId], references: [id])
  subscriptionId Int?          @map("subscription")
  service        Service?      @relation("CartItem_service", fields: [serviceId], references: [id])
  serviceId      Int?          @map("service")
  price          Int?

  @@index([cartId])
  @@index([subscriptionId])
  @@index([serviceId])
}

model Category {
  id                      Int       @id @default(autoincrement())
  language                String    @default("ru")
  name                    String    @default("")
  products                Product[] @relation("Category_products")
  createdAt               DateTime  @default(now())
  lastModification        DateTime  @default(now()) @updatedAt
  from_Product_category   Product[] @relation("Product_category")
  from_Service_categories Service[] @relation("Service_categories")

  @@index([language])
}

model Direction {
  id               Int               @id @default(autoincrement())
  language         String            @default("ru")
  statusView       String            @default("show")
  slug             String            @default("")
  name             String            @default("")
  description      String            @default("") @mysql.VarChar(10000)
  image_filesize   Int?
  image_extension  String?
  image_width      Int?
  image_height     Int?
  image_id         String?
  goals            DirectionGoal[]   @relation("Direction_goals")
  results          DirectionResult[] @relation("Direction_results")
  products         Product[]         @relation("Direction_products")
  createdAt        DateTime          @default(now())
  lastModification DateTime          @default(now()) @updatedAt

  @@index([language])
  @@index([slug])
}

model DirectionGoal {
  id                   Int         @id @default(autoincrement())
  statusView           String      @default("show")
  name                 String      @default("")
  image_filesize       Int?
  image_extension      String?
  image_width          Int?
  image_height         Int?
  image_id             String?
  createdAt            DateTime    @default(now())
  lastModification     DateTime    @default(now()) @updatedAt
  from_Direction_goals Direction[] @relation("Direction_goals")
}

model DirectionResult {
  id                     Int         @id @default(autoincrement())
  statusView             String      @default("show")
  name                   String      @default("")
  createdAt              DateTime    @default(now())
  lastModification       DateTime    @default(now()) @updatedAt
  from_Direction_results Direction[] @relation("Direction_results")
}

model Order {
  id               Int                @id @default(autoincrement())
  label            String             @default("")
  student          User?              @relation("Order_student", fields: [studentId], references: [id])
  studentId        Int?               @map("student")
  quantityPayments Int                @default(1)
  currency         String             @default("RUB")
  payments         Payment[]          @relation("Payment_order")
  status           OrderStatusType?   @default(created)
  subscriptions    UserSubscription[] @relation("Order_subscriptions")
  services         UserService[]      @relation("Order_services")
  amount           Int?
  createdAt        DateTime           @default(now())
  lastModification DateTime           @default(now()) @updatedAt

  @@index([studentId])
}

model Payment {
  id               Int               @id @default(autoincrement())
  order            Order?            @relation("Payment_order", fields: [orderId], references: [id])
  orderId          Int?              @map("order")
  currency         String            @default("RUB")
  student          User?             @relation("Payment_student", fields: [studentId], references: [id])
  studentId        Int?              @map("student")
  amount           Int?              @default(0)
  sessionId        String            @default("")
  receiptId        String            @default("")
  status           PaymentStatusType @default(created)
  createdAt        DateTime          @default(now())
  lastModification DateTime          @default(now()) @updatedAt

  @@index([orderId])
  @@index([studentId])
}

model Product {
  id                          Int             @id @default(autoincrement())
  language                    String          @default("ru")
  statusView                  String          @default("show")
  name                        String          @default("")
  description                 String          @default("") @mysql.VarChar(10000)
  desc                        Json            @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  category                    Category?       @relation("Product_category", fields: [categoryId], references: [id])
  categoryId                  Int?            @map("category")
  image_filesize              Int?
  image_extension             String?
  image_width                 Int?
  image_height                Int?
  image_id                    String?
  tags                        Tag[]           @relation("Product_tags")
  subscriptions               Subscription[]  @relation("Product_subscriptions")
  createdAt                   DateTime        @default(now())
  lastModification            DateTime        @default(now()) @updatedAt
  from_Category_products      Category[]      @relation("Category_products")
  from_Direction_products     Direction[]     @relation("Direction_products")
  from_ProductReview_products ProductReview[] @relation("ProductReview_products")
  from_Faq_products           Faq[]           @relation("Faq_products")

  @@index([language])
  @@index([categoryId])
}

model ProductReview {
  id               Int       @id @default(autoincrement())
  language         String    @default("ru")
  statusView       String    @default("show")
  student          User?     @relation("ProductReview_student", fields: [studentId], references: [id])
  studentId        Int?      @map("student")
  products         Product[] @relation("ProductReview_products")
  desc             String    @default("") @mysql.VarChar(10000)
  media            String    @default("")
  createdAt        DateTime  @default(now())
  lastModification DateTime  @default(now()) @updatedAt

  @@index([language])
  @@index([studentId])
}

model User {
  id                            Int                @id @default(autoincrement())
  language                      String             @default("ru")
  avatar                        AvatarUser?        @relation("AvatarUser_user")
  name                          String             @default("")
  email                         String             @unique @default("")
  password                      String?
  role                          UserRoleType?      @default(student)
  comment                       String             @default("") @mysql.VarChar(10000)
  client                        Client?            @relation("User_client", fields: [clientId], references: [id])
  clientId                      Int?               @map("client")
  manager                       Manager?           @relation("User_manager", fields: [managerId], references: [id])
  managerId                     Int?               @map("manager")
  cart                          Cart?              @relation("Cart_user")
  magicLinkToken                String             @default("")
  createdAt                     DateTime           @default(now())
  lastModification              DateTime           @default(now()) @updatedAt
  magicAuthToken                String?
  magicAuthIssuedAt             DateTime?
  magicAuthRedeemedAt           DateTime?
  from_Order_student            Order[]            @relation("Order_student")
  from_Payment_student          Payment[]          @relation("Payment_student")
  from_ProductReview_student    ProductReview[]    @relation("ProductReview_student")
  from_UserSubscription_student UserSubscription[] @relation("UserSubscription_student")
  from_UserSubscription_manager UserSubscription[] @relation("UserSubscription_manager")
  from_UserService_student      UserService[]      @relation("UserService_student")
  from_UserService_manager      UserService[]      @relation("UserService_manager")
  from_Page_author              Page[]             @relation("Page_author")
  from_Post_author              Post[]             @relation("Post_author")
  from_Lesson_students          Lesson[]           @relation("Lesson_students")
  from_Mailing_clients          Mailing[]          @relation("Mailing_clients")

  @@index([language])
  @@index([clientId])
  @@index([managerId])
}

model AvatarUser {
  id               Int      @id @default(autoincrement())
  user             User?    @relation("AvatarUser_user", fields: [userId], references: [id])
  userId           Int?     @unique @map("user")
  image_filesize   Int?
  image_extension  String?
  image_width      Int?
  image_height     Int?
  image_id         String?
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt
}

model SourceClient {
  id                       Int            @id @default(autoincrement())
  name                     String         @default("")
  parent                   SourceClient?  @relation("SourceClient_parent", fields: [parentId], references: [id])
  parentId                 Int?           @map("parent")
  createdAt                DateTime       @default(now())
  lastModification         DateTime       @default(now()) @updatedAt
  from_SourceClient_parent SourceClient[] @relation("SourceClient_parent")
  from_Client_source       Client[]       @relation("Client_source")

  @@index([parentId])
}

model Subscription {
  id                         Int        @id @default(autoincrement())
  language                   String     @default("ru")
  statusView                 String     @default("show")
  name                       String     @default("")
  visitCount                 Int        @default(10)
  unlimited                  Boolean    @default(false)
  price                      Int
  period                     Int?       @default(45)
  desc                       Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  trial                      Boolean    @default(false)
  createdAt                  DateTime   @default(now())
  lastModification           DateTime   @default(now()) @updatedAt
  from_CartItem_subscription CartItem[] @relation("CartItem_subscription")
  from_Product_subscriptions Product[]  @relation("Product_subscriptions")

  @@index([language])
}

model UserSubscription {
  id                       Int       @id @default(autoincrement())
  name                     String    @default("")
  visitCount               Int?
  unlimited                Boolean   @default(false)
  originalPrice            Int?
  price                    Int?
  status                   String    @default("active")
  student                  User?     @relation("UserSubscription_student", fields: [studentId], references: [id])
  studentId                Int?      @map("student")
  beginDate                DateTime? @default(now())
  endDate                  DateTime?
  customVisited            Int?      @default(0)
  lessons                  Lesson[]  @relation("Lesson_subscription")
  trial                    Boolean   @default(false)
  manager                  User?     @relation("UserSubscription_manager", fields: [managerId], references: [id])
  managerId                Int?      @map("manager")
  createdAt                DateTime  @default(now())
  lastModification         DateTime  @default(now()) @updatedAt
  from_Order_subscriptions Order[]   @relation("Order_subscriptions")

  @@index([studentId])
  @@index([managerId])
}

model Service {
  id                    Int        @id @default(autoincrement())
  language              String     @default("ru")
  statusView            String     @default("show")
  name                  String     @default("")
  description           Json       @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  categories            Category[] @relation("Service_categories")
  price                 Int?       @default(0)
  createdAt             DateTime   @default(now())
  lastModification      DateTime   @default(now()) @updatedAt
  from_CartItem_service CartItem[] @relation("CartItem_service")

  @@index([language])
}

model UserService {
  id                  Int      @id @default(autoincrement())
  name                String   @default("")
  originalPrice       Int?
  status              String   @default("finished")
  price               Int?
  student             User?    @relation("UserService_student", fields: [studentId], references: [id])
  studentId           Int?     @map("student")
  manager             User?    @relation("UserService_manager", fields: [managerId], references: [id])
  managerId           Int?     @map("manager")
  createdAt           DateTime @default(now())
  lastModification    DateTime @default(now()) @updatedAt
  from_Order_services Order[]  @relation("Order_services")

  @@index([studentId])
  @@index([managerId])
}

model Page {
  id               Int      @id @default(autoincrement())
  language         String   @default("ru")
  statusView       String   @default("show")
  title            String   @default("")
  slug             String   @default("")
  description      String   @default("") @mysql.VarChar(10000)
  content          Json     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  tag              Tag[]    @relation("Page_tag")
  author           User?    @relation("Page_author", fields: [authorId], references: [id])
  authorId         Int?     @map("author")
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([language])
  @@index([slug])
  @@index([authorId])
}

model Tag {
  id                Int       @id @default(autoincrement())
  language          String    @default("ru")
  name              String    @default("")
  createdAt         DateTime  @default(now())
  lastModification  DateTime  @default(now()) @updatedAt
  from_Product_tags Product[] @relation("Product_tags")
  from_Page_tag     Page[]    @relation("Page_tag")
  from_Post_tag     Post[]    @relation("Post_tag")

  @@index([language])
}

model Faq {
  id               Int       @id @default(autoincrement())
  language         String    @default("ru")
  statusView       String    @default("show")
  products         Product[] @relation("Faq_products")
  title            String    @default("")
  desc             String    @default("") @mysql.VarChar(1000)
  createdAt        DateTime  @default(now())
  lastModification DateTime  @default(now()) @updatedAt

  @@index([language])
}

model Post {
  id               Int      @id @default(autoincrement())
  language         String   @default("ru")
  statusView       String   @default("show")
  cover_filesize   Int?
  cover_extension  String?
  cover_width      Int?
  cover_height     Int?
  cover_id         String?
  title            String   @default("")
  description      String   @default("") @mysql.VarChar(10000)
  content          Json     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  tag              Tag[]    @relation("Post_tag")
  author           User?    @relation("Post_author", fields: [authorId], references: [id])
  authorId         Int?     @map("author")
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([language])
  @@index([authorId])
}

model Marketing {
  id               Int      @id @default(autoincrement())
  language         String   @default("ru")
  statusView       String   @default("show")
  slug             String   @unique @default("")
  image_filesize   Int?
  image_extension  String?
  image_width      Int?
  image_height     Int?
  image_id         String?
  title            String   @default("")
  description      String   @default("") @mysql.VarChar(10000)
  aboutGeorge      Boolean  @default(true)
  advantages       Boolean  @default(true)
  reviews          Boolean  @default(true)
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([language])
}

model Link {
  id               String   @id @default(cuid())
  status           String   @default("active")
  link             String   @default("")
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt
}

model Client {
  id               Int                     @id @default(autoincrement())
  language         String                  @default("ru")
  name             String                  @default("")
  email            String                  @default("")
  phone            Decimal?                @mysql.Decimal(18, 0)
  statusClient     ClientStatusClientType? @default(new)
  levelStudent     ClientLevelStudentType? @default(a1)
  profession       String                  @default("")
  goal             String                  @default("")
  source           SourceClient[]          @relation("Client_source")
  teachers         Manager[]               @relation("Client_teachers")
  comment          String                  @default("") @mysql.VarChar(10000)
  ymClientId       String                  @default("")
  createdAt        DateTime                @default(now())
  lastModification DateTime                @default(now()) @updatedAt
  from_User_client User[]                  @relation("User_client")

  @@index([language])
}

model Manager {
  id                   Int              @id @default(autoincrement())
  language             String           @default("ru")
  name                 String           @default("")
  email                String           @default("")
  phone                Decimal?         @mysql.Decimal(18, 0)
  work                 Boolean          @default(true)
  teacher              Boolean          @default(true)
  linkOnlineLesson     String           @default("")
  workTime             WorkTime[]       @relation("WorkTime_manager")
  cutoff               WorkTimeCutoff[] @relation("WorkTimeCutoff_manager")
  timeZone             String           @default("Europe/Moscow")
  comment              String           @default("") @mysql.VarChar(10000)
  createdAt            DateTime         @default(now())
  lastModification     DateTime         @default(now()) @updatedAt
  from_User_manager    User[]           @relation("User_manager")
  from_Client_teachers Client[]         @relation("Client_teachers")
  from_Lesson_teachers Lesson[]         @relation("Lesson_teachers")

  @@index([language])
}

model WorkTime {
  id               Int      @id @default(autoincrement())
  manager          Manager? @relation("WorkTime_manager", fields: [managerId], references: [id])
  managerId        Int?     @map("manager")
  dayOfWeek        Int
  isDayOff         Boolean  @default(false)
  startTime        String   @default("")
  endTime          String   @default("")
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([managerId])
}

model WorkTimeCutoff {
  id               Int      @id @default(autoincrement())
  statusView       String   @default("show")
  manager          Manager? @relation("WorkTimeCutoff_manager", fields: [managerId], references: [id])
  managerId        Int?     @map("manager")
  startTime        DateTime
  endTime          DateTime
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([managerId])
}

model Lesson {
  id               Int               @id @default(autoincrement())
  statusLesson     String            @default("created")
  title            String            @default("")
  description      String            @default("")
  startTime        DateTime
  endTime          DateTime
  trial            Boolean           @default(false)
  burned           Boolean           @default(false)
  students         User[]            @relation("Lesson_students")
  subscription     UserSubscription? @relation("Lesson_subscription", fields: [subscriptionId], references: [id])
  subscriptionId   Int?              @map("subscription")
  teachers         Manager[]         @relation("Lesson_teachers")
  comment          String            @default("") @mysql.VarChar(10000)
  timeZone         String            @default("Europe/Moscow")
  notified         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  lastModification DateTime          @default(now()) @updatedAt

  @@index([subscriptionId])
}

model Mailing {
  id               Int      @id @default(autoincrement())
  language         String   @default("ru")
  status           String   @default("draft")
  clients          User[]   @relation("Mailing_clients")
  statusClient     Json     @default("[]")
  title            String   @default("")
  content          Json     @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  shipped          Boolean  @default(false)
  createdAt        DateTime @default(now())
  lastModification DateTime @default(now()) @updatedAt

  @@index([language])
}

enum OrderStatusType {
  created
  frozen
  processing
  finished
  cancelled
}

enum PaymentStatusType {
  created
  successfully
  cancelled
  error
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}

enum ClientStatusClientType {
  new
  firstCall
  recordFirstLesson
  trialLesson
  decisionAfterTrialLesson
  LowQualityLead
  client
  finishedClient
  disabledClient
  rejection
}

enum ClientLevelStudentType {
  a1
  a2
  b1
  b2
  c1
}

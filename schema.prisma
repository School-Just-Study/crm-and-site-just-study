// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Address {
  id                String    @id @default(cuid())
  language          String?   @default("ru")
  city              String    @default("")
  country           String    @default("")
  user              User?     @relation("Address_user", fields: [userId], references: [id])
  userId            String?   @map("user")
  createdAt         DateTime? @default(now())
  lastModification  DateTime? @default(now()) @updatedAt
  from_User_address User[]    @relation("User_address")

  @@index([userId])
}

model Cart {
  id           String    @id @default(cuid())
  user         User?     @relation("Cart_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  products     Product[] @relation("Cart_products")
  lastModified DateTime? @default(now()) @updatedAt
  sum          Decimal   @default("0") @postgresql.Decimal(18, 4)

  @@index([userId])
}

model Category {
  id                      String     @id @default(cuid())
  language                String?    @default("ru")
  name                    String     @default("")
  parent                  Category?  @relation("Category_parent", fields: [parentId], references: [id])
  parentId                String?    @map("parent")
  products                Product[]  @relation("Category_products")
  status                  String?    @default("Draft")
  createdAt               DateTime?  @default(now())
  lastModification        DateTime?  @default(now()) @updatedAt
  from_Category_parent    Category[] @relation("Category_parent")
  from_Product_categories Product[]  @relation("Product_categories")

  @@index([parentId])
}

model Order {
  id                 String           @id @default(cuid())
  user               User?            @relation("Order_user", fields: [userId], references: [id])
  userId             String?          @map("user")
  products           Json?
  payment            Payment?         @relation("Order_payment", fields: [paymentId], references: [id])
  paymentId          String?          @map("payment")
  employee           User?            @relation("Order_employee", fields: [employeeId], references: [id])
  employeeId         String?          @map("employee")
  status             OrderStatusType?
  createdAt          DateTime?        @default(now())
  lastModification   DateTime?        @default(now()) @updatedAt
  from_Payment_order Payment[]        @relation("Payment_order")

  @@index([userId])
  @@index([paymentId])
  @@index([employeeId])
}

model Payment {
  id                 String             @id @default(cuid())
  order              Order?             @relation("Payment_order", fields: [orderId], references: [id])
  orderId            String?            @map("order")
  sum                Decimal?           @postgresql.Decimal(18, 0)
  externalId         String             @default("")
  status             PaymentStatusType?
  createdAt          DateTime?          @default(now())
  lastModification   DateTime?          @default(now()) @updatedAt
  from_Order_payment Order[]            @relation("Order_payment")

  @@index([orderId])
}

model Product {
  id                          String             @id @default(cuid())
  language                    String?            @default("ru")
  name                        String             @default("")
  description                 String             @default("")
  seoDesc                     String             @default("")
  categories                  Category[]         @relation("Product_categories")
  status                      ProductStatusType? @default(Draft)
  images                      ProductImage[]     @relation("Product_images")
  price                       Decimal?           @postgresql.Decimal(18, 0)
  createdAt                   DateTime?          @default(now())
  lastModification            DateTime?          @default(now()) @updatedAt
  from_Cart_products          Cart[]             @relation("Cart_products")
  from_Category_products      Category[]         @relation("Category_products")
  from_ProductReview_products ProductReview[]    @relation("ProductReview_products")
}

model ProductImage {
  id                  String    @id @default(cuid())
  alt                 String    @default("")
  image_filesize      Int?
  image_extension     String?
  image_width         Int?
  image_height        Int?
  image_id            String?
  createdAt           DateTime? @default(now())
  lastModification    DateTime? @default(now()) @updatedAt
  from_Product_images Product[] @relation("Product_images")
}

model ProductReview {
  id               String                   @id @default(cuid())
  language         String?                  @default("ru")
  user             User?                    @relation("ProductReview_user", fields: [userId], references: [id])
  userId           String?                  @map("user")
  products         Product[]                @relation("ProductReview_products")
  status           ProductReviewStatusType? @default(Draft)
  desc             String                   @default("")
  media            String                   @default("")
  createdAt        DateTime?                @default(now())
  lastModification DateTime?                @default(now()) @updatedAt

  @@index([userId])
}

model User {
  id                      String          @id @default(cuid())
  language                String?         @default("ru")
  name                    String          @default("")
  email                   String          @unique @default("")
  password                String
  role                    UserRoleType?   @default(student)
  address                 Address[]       @relation("User_address")
  createdAt               DateTime?       @default(now())
  lastModification        DateTime?       @default(now()) @updatedAt
  from_Address_user       Address[]       @relation("Address_user")
  from_Cart_user          Cart[]          @relation("Cart_user")
  from_Order_user         Order[]         @relation("Order_user")
  from_Order_employee     Order[]         @relation("Order_employee")
  from_ProductReview_user ProductReview[] @relation("ProductReview_user")
}

enum OrderStatusType {
  Created
  Frozen
  Processing
  Finished
}

enum PaymentStatusType {
  Created
  Successfully
  Cancelled
}

enum ProductStatusType {
  Draft
  Hide
  Show
  Archive
}

enum ProductReviewStatusType {
  Draft
  Hide
  Show
  Archive
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}
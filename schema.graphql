# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Cart {
  id: ID!
  user: User
  currency: String
  items(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  itemsCount(where: CartItemWhereInput! = {}): Int
  amount: Int
  quantityPayments: Int
  lastModification: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CartWhereUniqueInput {
  id: ID
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  user: UserWhereInput
  currency: StringFilter
  items: CartItemManyRelationFilter
  quantityPayments: IntNullableFilter
  lastModification: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CartItemManyRelationFilter {
  every: CartItemWhereInput
  some: CartItemWhereInput
  none: CartItemWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input CartOrderByInput {
  id: OrderDirection
  currency: OrderDirection
  quantityPayments: OrderDirection
  lastModification: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CartUpdateInput {
  user: UserRelateToOneForUpdateInput
  currency: String
  items: CartItemRelateToManyForUpdateInput
  quantityPayments: Int
  lastModification: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CartItemRelateToManyForUpdateInput {
  disconnect: [CartItemWhereUniqueInput!]
  set: [CartItemWhereUniqueInput!]
  create: [CartItemCreateInput!]
  connect: [CartItemWhereUniqueInput!]
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

type CartItem {
  id: ID!
  cart: Cart
  subscription: Subscription
  service: Service
  originalPrice: Int
  price: Int
}

input CartItemWhereUniqueInput {
  id: ID
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  id: IDFilter
  cart: CartWhereInput
  subscription: SubscriptionWhereInput
  service: ServiceWhereInput
  price: IntNullableFilter
}

input CartItemOrderByInput {
  id: OrderDirection
  price: OrderDirection
}

input CartItemUpdateInput {
  cart: CartRelateToOneForUpdateInput
  subscription: SubscriptionRelateToOneForUpdateInput
  service: ServiceRelateToOneForUpdateInput
  price: Int
}

input CartRelateToOneForUpdateInput {
  connect: CartWhereUniqueInput
  disconnect: Boolean
}

input SubscriptionRelateToOneForUpdateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
  disconnect: Boolean
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input CartItemUpdateArgs {
  where: CartItemWhereUniqueInput!
  data: CartItemUpdateInput!
}

input CartItemCreateInput {
  cart: CartRelateToOneForCreateInput
  subscription: SubscriptionRelateToOneForCreateInput
  service: ServiceRelateToOneForCreateInput
  price: Int
}

input CartRelateToOneForCreateInput {
  connect: CartWhereUniqueInput
}

input SubscriptionRelateToOneForCreateInput {
  create: SubscriptionCreateInput
  connect: SubscriptionWhereUniqueInput
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type Category {
  id: ID!
  language: String
  name: String
  parent: Category
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  statusView: String
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  language: StringFilter
  name: StringFilter
  parent: CategoryWhereInput
  products: ProductManyRelationFilter
  statusView: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  statusView: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input CategoryUpdateInput {
  language: String
  name: String
  parent: CategoryRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  statusView: String
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  language: String
  name: String
  parent: CategoryRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  statusView: String
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Order {
  id: ID!
  label: String
  student: User
  leftPayments: Int
  currency: String
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  status: OrderStatusType
  subscriptions(
    where: UserSubscriptionWhereInput! = {}
    orderBy: [UserSubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserSubscription!]
  subscriptionsCount(where: UserSubscriptionWhereInput! = {}): Int
  services(
    where: UserServiceWhereInput! = {}
    orderBy: [UserServiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserService!]
  servicesCount(where: UserServiceWhereInput! = {}): Int
  amount: Int
  payed: Int
  dept: Int
  nextPayment: Int
  createdAt: DateTime
  lastModification: DateTime
}

enum OrderStatusType {
  created
  frozen
  processing
  finished
  cancelled
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  label: StringFilter
  student: UserWhereInput
  leftPayments: IntFilter
  currency: StringFilter
  payments: PaymentManyRelationFilter
  status: OrderStatusTypeNullableFilter
  subscriptions: UserSubscriptionManyRelationFilter
  services: UserServiceManyRelationFilter
  amount: IntNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input OrderStatusTypeNullableFilter {
  equals: OrderStatusType
  in: [OrderStatusType!]
  notIn: [OrderStatusType!]
  not: OrderStatusTypeNullableFilter
}

input UserSubscriptionManyRelationFilter {
  every: UserSubscriptionWhereInput
  some: UserSubscriptionWhereInput
  none: UserSubscriptionWhereInput
}

input UserServiceManyRelationFilter {
  every: UserServiceWhereInput
  some: UserServiceWhereInput
  none: UserServiceWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  label: OrderDirection
  leftPayments: OrderDirection
  currency: OrderDirection
  status: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input OrderUpdateInput {
  label: String
  student: UserRelateToOneForUpdateInput
  leftPayments: Int
  currency: String
  payments: PaymentRelateToManyForUpdateInput
  status: OrderStatusType
  subscriptions: UserSubscriptionRelateToManyForUpdateInput
  services: UserServiceRelateToManyForUpdateInput
  amount: Int
  createdAt: DateTime
  lastModification: DateTime
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserSubscriptionRelateToManyForUpdateInput {
  disconnect: [UserSubscriptionWhereUniqueInput!]
  set: [UserSubscriptionWhereUniqueInput!]
  create: [UserSubscriptionCreateInput!]
  connect: [UserSubscriptionWhereUniqueInput!]
}

input UserServiceRelateToManyForUpdateInput {
  disconnect: [UserServiceWhereUniqueInput!]
  set: [UserServiceWhereUniqueInput!]
  create: [UserServiceCreateInput!]
  connect: [UserServiceWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  label: String
  student: UserRelateToOneForCreateInput
  leftPayments: Int
  currency: String
  payments: PaymentRelateToManyForCreateInput
  status: OrderStatusType
  subscriptions: UserSubscriptionRelateToManyForCreateInput
  services: UserServiceRelateToManyForCreateInput
  amount: Int
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input UserSubscriptionRelateToManyForCreateInput {
  create: [UserSubscriptionCreateInput!]
  connect: [UserSubscriptionWhereUniqueInput!]
}

input UserServiceRelateToManyForCreateInput {
  create: [UserServiceCreateInput!]
  connect: [UserServiceWhereUniqueInput!]
}

type Payment {
  id: ID!
  order: Order
  currency: String
  student: User
  amount: Int
  sessionId: String
  receiptId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

enum PaymentStatusType {
  created
  successfully
  cancelled
  error
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  currency: StringFilter
  student: UserWhereInput
  amount: IntNullableFilter
  sessionId: StringFilter
  receiptId: StringFilter
  status: PaymentStatusTypeNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input PaymentStatusTypeNullableFilter {
  equals: PaymentStatusType
  in: [PaymentStatusType!]
  notIn: [PaymentStatusType!]
  not: PaymentStatusTypeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  currency: OrderDirection
  amount: OrderDirection
  sessionId: OrderDirection
  receiptId: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PaymentUpdateInput {
  order: OrderRelateToOneForUpdateInput
  currency: String
  student: UserRelateToOneForUpdateInput
  amount: Int
  sessionId: String
  receiptId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  order: OrderRelateToOneForCreateInput
  currency: String
  student: UserRelateToOneForCreateInput
  amount: Int
  sessionId: String
  receiptId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Product {
  id: ID!
  language: String
  statusView: String
  name: String
  description: String
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  images: ImageFieldOutput
  price: Int
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  lastModification: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  name: StringFilter
  description: StringFilter
  categories: CategoryManyRelationFilter
  price: IntNullableFilter
  tag: TagManyRelationFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductUpdateInput {
  language: String
  statusView: String
  name: String
  description: String
  categories: CategoryRelateToManyForUpdateInput
  images: ImageFieldInput
  price: Int
  tag: TagRelateToManyForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  language: String
  statusView: String
  name: String
  description: String
  categories: CategoryRelateToManyForCreateInput
  images: ImageFieldInput
  price: Int
  tag: TagRelateToManyForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type ProductReview {
  id: ID!
  language: String
  statusView: String
  student: User
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

input ProductReviewWhereUniqueInput {
  id: ID
}

input ProductReviewWhereInput {
  AND: [ProductReviewWhereInput!]
  OR: [ProductReviewWhereInput!]
  NOT: [ProductReviewWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  student: UserWhereInput
  products: ProductManyRelationFilter
  desc: StringFilter
  media: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input ProductReviewOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  desc: OrderDirection
  media: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductReviewUpdateInput {
  language: String
  statusView: String
  student: UserRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

input ProductReviewUpdateArgs {
  where: ProductReviewWhereUniqueInput!
  data: ProductReviewUpdateInput!
}

input ProductReviewCreateInput {
  language: String
  statusView: String
  student: UserRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

type User {
  id: ID!
  language: String
  avatar: AvatarUser
  name: String
  email: String
  password: PasswordState
  phone: Decimal
  statusClient: UserStatusClientType
  levelStudent: UserLevelStudentType
  goal: String
  source(
    where: SourceClientWhereInput! = {}
    orderBy: [SourceClientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SourceClient!]
  sourceCount(where: SourceClientWhereInput! = {}): Int
  role: UserRoleType
  comment: String
  cart: Cart
  magicLinkToken: String
  createdAt: DateTime
  lastModification: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar Decimal

enum UserStatusClientType {
  new
  firstCall
  recordFirstLesson
  trialLesson
  decisionAfterTrialLesson
  LowQualityLead
  client
  disabledClient
  rejection
}

enum UserLevelStudentType {
  a1
  a2
  b1
  b2
  c1
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  language: StringFilter
  avatar: AvatarUserWhereInput
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  phone: DecimalFilter
  statusClient: UserStatusClientTypeNullableFilter
  levelStudent: UserLevelStudentTypeNullableFilter
  goal: StringFilter
  source: SourceClientManyRelationFilter
  role: UserRoleTypeNullableFilter
  comment: StringFilter
  cart: CartWhereInput
  magicLinkToken: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input UserStatusClientTypeNullableFilter {
  equals: UserStatusClientType
  in: [UserStatusClientType!]
  notIn: [UserStatusClientType!]
  not: UserStatusClientTypeNullableFilter
}

input UserLevelStudentTypeNullableFilter {
  equals: UserLevelStudentType
  in: [UserLevelStudentType!]
  notIn: [UserLevelStudentType!]
  not: UserLevelStudentTypeNullableFilter
}

input SourceClientManyRelationFilter {
  every: SourceClientWhereInput
  some: SourceClientWhereInput
  none: SourceClientWhereInput
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  statusClient: OrderDirection
  levelStudent: OrderDirection
  goal: OrderDirection
  role: OrderDirection
  comment: OrderDirection
  magicLinkToken: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

input UserUpdateInput {
  language: String
  avatar: AvatarUserRelateToOneForUpdateInput
  name: String
  email: String
  password: String
  phone: Decimal
  statusClient: UserStatusClientType
  levelStudent: UserLevelStudentType
  goal: String
  source: SourceClientRelateToManyForUpdateInput
  role: UserRoleType
  comment: String
  cart: CartRelateToOneForUpdateInput
  magicLinkToken: String
  createdAt: DateTime
  lastModification: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input AvatarUserRelateToOneForUpdateInput {
  create: AvatarUserCreateInput
  connect: AvatarUserWhereUniqueInput
  disconnect: Boolean
}

input SourceClientRelateToManyForUpdateInput {
  disconnect: [SourceClientWhereUniqueInput!]
  set: [SourceClientWhereUniqueInput!]
  create: [SourceClientCreateInput!]
  connect: [SourceClientWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  language: String
  avatar: AvatarUserRelateToOneForCreateInput
  name: String
  email: String
  password: String
  phone: Decimal
  statusClient: UserStatusClientType
  levelStudent: UserLevelStudentType
  goal: String
  source: SourceClientRelateToManyForCreateInput
  role: UserRoleType
  comment: String
  cart: CartRelateToOneForCreateInput
  magicLinkToken: String
  createdAt: DateTime
  lastModification: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input AvatarUserRelateToOneForCreateInput {
  create: AvatarUserCreateInput
  connect: AvatarUserWhereUniqueInput
}

input SourceClientRelateToManyForCreateInput {
  create: [SourceClientCreateInput!]
  connect: [SourceClientWhereUniqueInput!]
}

type AvatarUser {
  id: ID!
  user: User
  image: ImageFieldOutput
  createdAt: DateTime
  lastModification: DateTime
}

input AvatarUserWhereUniqueInput {
  id: ID
}

input AvatarUserWhereInput {
  AND: [AvatarUserWhereInput!]
  OR: [AvatarUserWhereInput!]
  NOT: [AvatarUserWhereInput!]
  id: IDFilter
  user: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input AvatarUserOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input AvatarUserUpdateInput {
  user: UserRelateToOneForUpdateInput
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

input AvatarUserUpdateArgs {
  where: AvatarUserWhereUniqueInput!
  data: AvatarUserUpdateInput!
}

input AvatarUserCreateInput {
  user: UserRelateToOneForCreateInput
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

type SourceClient {
  id: ID!
  name: String
  parent: SourceClient
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientWhereUniqueInput {
  id: ID
}

input SourceClientWhereInput {
  AND: [SourceClientWhereInput!]
  OR: [SourceClientWhereInput!]
  NOT: [SourceClientWhereInput!]
  id: IDFilter
  name: StringFilter
  parent: SourceClientWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input SourceClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input SourceClientUpdateInput {
  name: String
  parent: SourceClientRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientRelateToOneForUpdateInput {
  create: SourceClientCreateInput
  connect: SourceClientWhereUniqueInput
  disconnect: Boolean
}

input SourceClientUpdateArgs {
  where: SourceClientWhereUniqueInput!
  data: SourceClientUpdateInput!
}

input SourceClientCreateInput {
  name: String
  parent: SourceClientRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input SourceClientRelateToOneForCreateInput {
  create: SourceClientCreateInput
  connect: SourceClientWhereUniqueInput
}

type Subscription {
  id: ID!
  language: String
  label: String
  statusView: String
  name: String
  description: Subscription_description_Document
  visitCount: Int
  price: Int
  period: Int
  createdAt: DateTime
  lastModification: DateTime
}

type Subscription_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SubscriptionWhereUniqueInput {
  id: ID
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  name: StringFilter
  visitCount: IntFilter
  price: IntFilter
  period: IntNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input SubscriptionOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  visitCount: OrderDirection
  price: OrderDirection
  period: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input SubscriptionUpdateInput {
  language: String
  statusView: String
  name: String
  description: JSON
  visitCount: Int
  price: Int
  period: Int
  createdAt: DateTime
  lastModification: DateTime
}

input SubscriptionUpdateArgs {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateInput!
}

input SubscriptionCreateInput {
  language: String
  statusView: String
  name: String
  description: JSON
  visitCount: Int
  price: Int
  period: Int
  createdAt: DateTime
  lastModification: DateTime
}

type UserSubscription {
  id: ID!
  name: String
  visitCount: Int
  originalPrice: Int
  price: Int
  period: Int
  status: String
  student: User
  beginDate: DateTime
  endDate: String
  payed: Int
  totalVisited: Int
  totalBurned: Int
  lastCount: Int
  manager: User
  createdAt: DateTime
  lastModification: DateTime
}

input UserSubscriptionWhereUniqueInput {
  id: ID
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
  id: IDFilter
  name: StringFilter
  visitCount: IntNullableFilter
  originalPrice: IntNullableFilter
  price: IntNullableFilter
  period: IntNullableFilter
  status: StringFilter
  student: UserWhereInput
  beginDate: DateTimeNullableFilter
  payed: IntNullableFilter
  totalVisited: IntFilter
  totalBurned: IntFilter
  manager: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input UserSubscriptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  visitCount: OrderDirection
  originalPrice: OrderDirection
  price: OrderDirection
  period: OrderDirection
  status: OrderDirection
  beginDate: OrderDirection
  payed: OrderDirection
  totalVisited: OrderDirection
  totalBurned: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input UserSubscriptionUpdateInput {
  name: String
  visitCount: Int
  originalPrice: Int
  price: Int
  period: Int
  status: String
  student: UserRelateToOneForUpdateInput
  beginDate: DateTime
  payed: Int
  totalVisited: Int
  totalBurned: Int
  manager: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserSubscriptionUpdateArgs {
  where: UserSubscriptionWhereUniqueInput!
  data: UserSubscriptionUpdateInput!
}

input UserSubscriptionCreateInput {
  name: String
  visitCount: Int
  originalPrice: Int
  price: Int
  period: Int
  status: String
  student: UserRelateToOneForCreateInput
  beginDate: DateTime
  payed: Int
  totalVisited: Int
  totalBurned: Int
  manager: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

type Service {
  id: ID!
  language: String
  label: String
  statusView: String
  name: String
  description: Service_description_Document
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  price: Int
  createdAt: DateTime
  lastModification: DateTime
}

type Service_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  name: StringFilter
  categories: CategoryManyRelationFilter
  price: IntNullableFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  name: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ServiceUpdateInput {
  language: String
  statusView: String
  name: String
  description: JSON
  categories: CategoryRelateToManyForUpdateInput
  price: Int
  createdAt: DateTime
  lastModification: DateTime
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  language: String
  statusView: String
  name: String
  description: JSON
  categories: CategoryRelateToManyForCreateInput
  price: Int
  createdAt: DateTime
  lastModification: DateTime
}

type UserService {
  id: ID!
  name: String
  originalPrice: Int
  status: String
  price: Int
  student: User
  payed: Int
  manager: User
  createdAt: DateTime
  lastModification: DateTime
}

input UserServiceWhereUniqueInput {
  id: ID
}

input UserServiceWhereInput {
  AND: [UserServiceWhereInput!]
  OR: [UserServiceWhereInput!]
  NOT: [UserServiceWhereInput!]
  id: IDFilter
  name: StringFilter
  originalPrice: IntNullableFilter
  status: StringFilter
  price: IntNullableFilter
  student: UserWhereInput
  payed: IntNullableFilter
  manager: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input UserServiceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  originalPrice: OrderDirection
  status: OrderDirection
  price: OrderDirection
  payed: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input UserServiceUpdateInput {
  name: String
  originalPrice: Int
  status: String
  price: Int
  student: UserRelateToOneForUpdateInput
  payed: Int
  manager: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserServiceUpdateArgs {
  where: UserServiceWhereUniqueInput!
  data: UserServiceUpdateInput!
}

input UserServiceCreateInput {
  name: String
  originalPrice: Int
  status: String
  price: Int
  student: UserRelateToOneForCreateInput
  payed: Int
  manager: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

type Page {
  id: ID!
  language: String
  statusView: String
  title: String
  slug: String
  description: String
  content: Page_content_Document
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  author: User
  createdAt: DateTime
  lastModification: DateTime
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  tag: TagManyRelationFilter
  author: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input PageOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PageUpdateInput {
  language: String
  statusView: String
  title: String
  slug: String
  description: String
  content: JSON
  tag: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  language: String
  statusView: String
  title: String
  slug: String
  description: String
  content: JSON
  tag: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

type Tag {
  id: ID!
  language: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  language: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input TagOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input TagUpdateInput {
  language: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  language: String
  name: String
  createdAt: DateTime
  lastModification: DateTime
}

type Faq {
  id: ID!
  language: String
  statusView: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  title: String
  desc: String
  createdAt: DateTime
  lastModification: DateTime
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  products: ProductManyRelationFilter
  title: StringFilter
  desc: StringFilter
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input FaqOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  desc: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input FaqUpdateInput {
  language: String
  statusView: String
  products: ProductRelateToManyForUpdateInput
  title: String
  desc: String
  createdAt: DateTime
  lastModification: DateTime
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  language: String
  statusView: String
  products: ProductRelateToManyForCreateInput
  title: String
  desc: String
  createdAt: DateTime
  lastModification: DateTime
}

type Post {
  id: ID!
  language: String
  statusView: String
  cover: ImageFieldOutput
  title: String
  description: String
  content: Post_content_Document
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  author: User
  createdAt: DateTime
  lastModification: DateTime
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  language: StringFilter
  statusView: StringFilter
  title: StringFilter
  description: StringFilter
  tag: TagManyRelationFilter
  author: UserWhereInput
  createdAt: DateTimeFilter
  lastModification: DateTimeFilter
}

input PostOrderByInput {
  id: OrderDirection
  language: OrderDirection
  statusView: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PostUpdateInput {
  language: String
  statusView: String
  cover: ImageFieldInput
  title: String
  description: String
  content: JSON
  tag: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  language: String
  statusView: String
  cover: ImageFieldInput
  title: String
  description: String
  content: JSON
  tag: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createCartItem(data: CartItemCreateInput!): CartItem
  createCartItems(data: [CartItemCreateInput!]!): [CartItem]
  updateCartItem(
    where: CartItemWhereUniqueInput!
    data: CartItemUpdateInput!
  ): CartItem
  updateCartItems(data: [CartItemUpdateArgs!]!): [CartItem]
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteCartItems(where: [CartItemWhereUniqueInput!]!): [CartItem]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(
    where: PaymentWhereUniqueInput!
    data: PaymentUpdateInput!
  ): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductReview(data: ProductReviewCreateInput!): ProductReview
  createProductReviews(data: [ProductReviewCreateInput!]!): [ProductReview]
  updateProductReview(
    where: ProductReviewWhereUniqueInput!
    data: ProductReviewUpdateInput!
  ): ProductReview
  updateProductReviews(data: [ProductReviewUpdateArgs!]!): [ProductReview]
  deleteProductReview(where: ProductReviewWhereUniqueInput!): ProductReview
  deleteProductReviews(
    where: [ProductReviewWhereUniqueInput!]!
  ): [ProductReview]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAvatarUser(data: AvatarUserCreateInput!): AvatarUser
  createAvatarUsers(data: [AvatarUserCreateInput!]!): [AvatarUser]
  updateAvatarUser(
    where: AvatarUserWhereUniqueInput!
    data: AvatarUserUpdateInput!
  ): AvatarUser
  updateAvatarUsers(data: [AvatarUserUpdateArgs!]!): [AvatarUser]
  deleteAvatarUser(where: AvatarUserWhereUniqueInput!): AvatarUser
  deleteAvatarUsers(where: [AvatarUserWhereUniqueInput!]!): [AvatarUser]
  createSourceClient(data: SourceClientCreateInput!): SourceClient
  createSourceClients(data: [SourceClientCreateInput!]!): [SourceClient]
  updateSourceClient(
    where: SourceClientWhereUniqueInput!
    data: SourceClientUpdateInput!
  ): SourceClient
  updateSourceClients(data: [SourceClientUpdateArgs!]!): [SourceClient]
  deleteSourceClient(where: SourceClientWhereUniqueInput!): SourceClient
  deleteSourceClients(where: [SourceClientWhereUniqueInput!]!): [SourceClient]
  createSubscription(data: SubscriptionCreateInput!): Subscription
  createSubscriptions(data: [SubscriptionCreateInput!]!): [Subscription]
  updateSubscription(
    where: SubscriptionWhereUniqueInput!
    data: SubscriptionUpdateInput!
  ): Subscription
  updateSubscriptions(data: [SubscriptionUpdateArgs!]!): [Subscription]
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptions(where: [SubscriptionWhereUniqueInput!]!): [Subscription]
  createUserSubscription(data: UserSubscriptionCreateInput!): UserSubscription
  createUserSubscriptions(
    data: [UserSubscriptionCreateInput!]!
  ): [UserSubscription]
  updateUserSubscription(
    where: UserSubscriptionWhereUniqueInput!
    data: UserSubscriptionUpdateInput!
  ): UserSubscription
  updateUserSubscriptions(
    data: [UserSubscriptionUpdateArgs!]!
  ): [UserSubscription]
  deleteUserSubscription(
    where: UserSubscriptionWhereUniqueInput!
  ): UserSubscription
  deleteUserSubscriptions(
    where: [UserSubscriptionWhereUniqueInput!]!
  ): [UserSubscription]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(
    where: ServiceWhereUniqueInput!
    data: ServiceUpdateInput!
  ): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createUserService(data: UserServiceCreateInput!): UserService
  createUserServices(data: [UserServiceCreateInput!]!): [UserService]
  updateUserService(
    where: UserServiceWhereUniqueInput!
    data: UserServiceUpdateInput!
  ): UserService
  updateUserServices(data: [UserServiceUpdateArgs!]!): [UserService]
  deleteUserService(where: UserServiceWhereUniqueInput!): UserService
  deleteUserServices(where: [UserServiceWhereUniqueInput!]!): [UserService]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserMagicAuthLink(email: String!): Boolean!
  redeemUserMagicAuthToken(
    email: String!
    token: String!
  ): RedeemUserMagicAuthTokenResult!
  authWithEmail(email: String!): String
  checkout(userId: String!): PaytureResponse
  payment(orderId: String!): PaytureResponse
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  phone: Decimal
  role: UserRoleType
}

union RedeemUserMagicAuthTokenResult =
    RedeemUserMagicAuthTokenSuccess
  | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  cartItems(
    where: CartItemWhereInput! = {}
    orderBy: [CartItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CartItem!]
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItemsCount(where: CartItemWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productReviews(
    where: ProductReviewWhereInput! = {}
    orderBy: [ProductReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductReview!]
  productReview(where: ProductReviewWhereUniqueInput!): ProductReview
  productReviewsCount(where: ProductReviewWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  avatarUsers(
    where: AvatarUserWhereInput! = {}
    orderBy: [AvatarUserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AvatarUser!]
  avatarUser(where: AvatarUserWhereUniqueInput!): AvatarUser
  avatarUsersCount(where: AvatarUserWhereInput! = {}): Int
  sourceClients(
    where: SourceClientWhereInput! = {}
    orderBy: [SourceClientOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SourceClient!]
  sourceClient(where: SourceClientWhereUniqueInput!): SourceClient
  sourceClientsCount(where: SourceClientWhereInput! = {}): Int
  subscriptions(
    where: SubscriptionWhereInput! = {}
    orderBy: [SubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Subscription!]
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionsCount(where: SubscriptionWhereInput! = {}): Int
  userSubscriptions(
    where: UserSubscriptionWhereInput! = {}
    orderBy: [UserSubscriptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserSubscription!]
  userSubscription(where: UserSubscriptionWhereUniqueInput!): UserSubscription
  userSubscriptionsCount(where: UserSubscriptionWhereInput! = {}): Int
  services(
    where: ServiceWhereInput! = {}
    orderBy: [ServiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Service!]
  service(where: ServiceWhereUniqueInput!): Service
  servicesCount(where: ServiceWhereInput! = {}): Int
  userServices(
    where: UserServiceWhereInput! = {}
    orderBy: [UserServiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserService!]
  userService(where: UserServiceWhereUniqueInput!): UserService
  userServicesCount(where: UserServiceWhereInput! = {}): Int
  pages(
    where: PageWhereInput! = {}
    orderBy: [PageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  faqs(
    where: FaqWhereInput! = {}
    orderBy: [FaqOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  againPayment(paymentId: String!): PaytureResponse
  checkPayment(paymentId: String!): Payment
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type PaytureResponse {
  Success: String!
  OrderId: String
  ErrCode: String
  RedirectUrl: String!
  Amount: String
  SessionLifeTime: String
  AttemptsCount: String
  SessionId: String
}

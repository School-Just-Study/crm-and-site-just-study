# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Address {
  id: ID!
  language: String
  city: String
  country: String
  user: User
  createdAt: DateTime
  lastModification: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  language: StringNullableFilter
  city: StringFilter
  country: StringFilter
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AddressOrderByInput {
  id: OrderDirection
  language: OrderDirection
  city: OrderDirection
  country: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AddressUpdateInput {
  language: String
  city: String
  country: String
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  language: String
  city: String
  country: String
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Cart {
  id: ID!
  user: User
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  lastModified: DateTime
  sum: Decimal
}

scalar Decimal

input CartWhereUniqueInput {
  id: ID
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  user: UserWhereInput
  products: ProductManyRelationFilter
  lastModified: DateTimeNullableFilter
  sum: DecimalFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input CartOrderByInput {
  id: OrderDirection
  lastModified: OrderDirection
  sum: OrderDirection
}

input CartUpdateInput {
  user: UserRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  lastModified: DateTime
  sum: Decimal
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

type Category {
  id: ID!
  language: String
  name: String
  parent: Category
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  status: String
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  language: StringNullableFilter
  name: StringFilter
  parent: CategoryWhereInput
  products: ProductManyRelationFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input CategoryUpdateInput {
  language: String
  name: String
  parent: CategoryRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  status: String
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  language: String
  name: String
  parent: CategoryRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  status: String
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Order {
  id: ID!
  user: User
  products: JSON
  payment: Payment
  employee: User
  status: OrderStatusType
  createdAt: DateTime
  lastModification: DateTime
}

enum OrderStatusType {
  Created
  Frozen
  Processing
  Finished
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  user: UserWhereInput
  payment: PaymentWhereInput
  employee: UserWhereInput
  status: OrderStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input OrderStatusTypeNullableFilter {
  equals: OrderStatusType
  in: [OrderStatusType!]
  notIn: [OrderStatusType!]
  not: OrderStatusTypeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input OrderUpdateInput {
  user: UserRelateToOneForUpdateInput
  products: JSON
  payment: PaymentRelateToOneForUpdateInput
  employee: UserRelateToOneForUpdateInput
  status: OrderStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  user: UserRelateToOneForCreateInput
  products: JSON
  payment: PaymentRelateToOneForCreateInput
  employee: UserRelateToOneForCreateInput
  status: OrderStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

type Payment {
  id: ID!
  order: Order
  sum: Decimal
  externalId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

enum PaymentStatusType {
  Created
  Successfully
  Cancelled
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  sum: DecimalNullableFilter
  externalId: StringFilter
  status: PaymentStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input PaymentStatusTypeNullableFilter {
  equals: PaymentStatusType
  in: [PaymentStatusType!]
  notIn: [PaymentStatusType!]
  not: PaymentStatusTypeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  sum: OrderDirection
  externalId: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input PaymentUpdateInput {
  order: OrderRelateToOneForUpdateInput
  sum: Decimal
  externalId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  order: OrderRelateToOneForCreateInput
  sum: Decimal
  externalId: String
  status: PaymentStatusType
  createdAt: DateTime
  lastModification: DateTime
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type Product {
  id: ID!
  language: String
  name: String
  description: String
  seoDesc: String
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  status: ProductStatusType
  images(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  imagesCount(where: ProductImageWhereInput! = {}): Int
  price: Decimal
  createdAt: DateTime
  lastModification: DateTime
}

enum ProductStatusType {
  Draft
  Hide
  Show
  Archive
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  language: StringNullableFilter
  name: StringFilter
  description: StringFilter
  seoDesc: StringFilter
  categories: CategoryManyRelationFilter
  status: ProductStatusTypeNullableFilter
  images: ProductImageManyRelationFilter
  price: DecimalNullableFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ProductStatusTypeNullableFilter {
  equals: ProductStatusType
  in: [ProductStatusType!]
  notIn: [ProductStatusType!]
  not: ProductStatusTypeNullableFilter
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  description: OrderDirection
  seoDesc: OrderDirection
  status: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductUpdateInput {
  language: String
  name: String
  description: String
  seoDesc: String
  categories: CategoryRelateToManyForUpdateInput
  status: ProductStatusType
  images: ProductImageRelateToManyForUpdateInput
  price: Decimal
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  language: String
  name: String
  description: String
  seoDesc: String
  categories: CategoryRelateToManyForCreateInput
  status: ProductStatusType
  images: ProductImageRelateToManyForCreateInput
  price: Decimal
  createdAt: DateTime
  lastModification: DateTime
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

type ProductImage {
  id: ID!
  alt: String
  image: ImageFieldOutput
  createdAt: DateTime
  lastModification: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  alt: StringFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  alt: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductImageUpdateInput {
  alt: String
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  alt: String
  image: ImageFieldInput
  createdAt: DateTime
  lastModification: DateTime
}

type ProductReview {
  id: ID!
  language: String
  user: User
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  status: ProductReviewStatusType
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

enum ProductReviewStatusType {
  Draft
  Hide
  Show
  Archive
}

input ProductReviewWhereUniqueInput {
  id: ID
}

input ProductReviewWhereInput {
  AND: [ProductReviewWhereInput!]
  OR: [ProductReviewWhereInput!]
  NOT: [ProductReviewWhereInput!]
  id: IDFilter
  language: StringNullableFilter
  user: UserWhereInput
  products: ProductManyRelationFilter
  status: ProductReviewStatusTypeNullableFilter
  desc: StringFilter
  media: StringFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input ProductReviewStatusTypeNullableFilter {
  equals: ProductReviewStatusType
  in: [ProductReviewStatusType!]
  notIn: [ProductReviewStatusType!]
  not: ProductReviewStatusTypeNullableFilter
}

input ProductReviewOrderByInput {
  id: OrderDirection
  language: OrderDirection
  status: OrderDirection
  desc: OrderDirection
  media: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input ProductReviewUpdateInput {
  language: String
  user: UserRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  status: ProductReviewStatusType
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

input ProductReviewUpdateArgs {
  where: ProductReviewWhereUniqueInput!
  data: ProductReviewUpdateInput!
}

input ProductReviewCreateInput {
  language: String
  user: UserRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  status: ProductReviewStatusType
  desc: String
  media: String
  createdAt: DateTime
  lastModification: DateTime
}

type User {
  id: ID!
  language: String
  name: String
  email: String
  password: PasswordState
  role: UserRoleType
  address(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  addressCount(where: AddressWhereInput! = {}): Int
  createdAt: DateTime
  lastModification: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  admin
  manager
  teacher
  student
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  language: StringNullableFilter
  name: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  address: AddressManyRelationFilter
  createdAt: DateTimeNullableFilter
  lastModification: DateTimeNullableFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  language: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  lastModification: OrderDirection
}

input UserUpdateInput {
  language: String
  name: String
  email: String
  password: String
  role: UserRoleType
  address: AddressRelateToManyForUpdateInput
  createdAt: DateTime
  lastModification: DateTime
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  language: String
  name: String
  email: String
  password: String
  role: UserRoleType
  address: AddressRelateToManyForCreateInput
  createdAt: DateTime
  lastModification: DateTime
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(
    where: PaymentWhereUniqueInput!
    data: PaymentUpdateInput!
  ): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createProductReview(data: ProductReviewCreateInput!): ProductReview
  createProductReviews(data: [ProductReviewCreateInput!]!): [ProductReview]
  updateProductReview(
    where: ProductReviewWhereUniqueInput!
    data: ProductReviewUpdateInput!
  ): ProductReview
  updateProductReviews(data: [ProductReviewUpdateArgs!]!): [ProductReview]
  deleteProductReview(where: ProductReviewWhereUniqueInput!): ProductReview
  deleteProductReviews(
    where: [ProductReviewWhereUniqueInput!]!
  ): [ProductReview]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  productReviews(
    where: ProductReviewWhereInput! = {}
    orderBy: [ProductReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductReview!]
  productReview(where: ProductReviewWhereUniqueInput!): ProductReview
  productReviewsCount(where: ProductReviewWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
